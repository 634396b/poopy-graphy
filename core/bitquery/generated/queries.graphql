query DexExchanges {
  ethereum {
    dexTrades(options: {asc: ["date.date"]}, date: {since: "2021-01-01"}) {
      numberOfTrades: count
      tradeAmount(in: USD)
      date {
        date
      }
    }
  }
}

query Eth20($from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum {
    smartContractEvents(
      options: {desc: "date.date"}
      smartContractAddress: {is: "0x00000000219ab540356cbb839cbe05303d7705fa"}
      date: {since: $from, till: $till}
    ) {
      date {
        date: startOfInterval(unit: day)
      }
      smartContractEvent {
        __typename
        name
      }
      times: count
      uniqueCallers: count(uniq: callers)
    }
  }
}

query BuySellPriceSpread {
  ethereum(network: ethereum) {
    dexTrades(
      date: {is: "2020-11-01"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      side
    }
  }
}

query BitcoinBlocksByHeight {
  bitcoin {
    blocks(options: {limit: 5, desc: "height"}) {
      height
      blockHash
      transactionCount
      date {
        date
      }
    }
  }
}

query DexTradesByProtocols {
  ethereum {
    dexTrades(options: {limit: 100, desc: "count"}) {
      count
      protocol
    }
  }
}

query Balance($network: EthereumNetwork!, $address: String!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query QueryDexBaseQuotePrices {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.day"}
      date: {between: ["2020-11-01", "2020-11-05"]}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      timeInterval {
        day(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
      baseAmount
    }
  }
}

query HasToContract {
  ethereum(network: bsc) {
    transfers(
      txHash: {in: "0x06a308e1a7de81f55f3dd57da7ce284f1493560fe17e537890f879752f88e63c", is: "0x06a308e1a7de81f55f3dd57da7ce284f1493560fe17e537890f879752f88e63c"}
    ) {
      currency {
        symbol
        name
        address
        tokenType
      }
    }
  }
}

query Eth20ContractBalance {
  ethereum {
    address(address: {is: "0x00000000219ab540356cbb839cbe05303d7705fa"}) {
      balances {
        currency {
          symbol
        }
        value
      }
    }
  }
}

query BaseQuoteQueryForMirrorPairs {
  ethereum {
    dexTrades(
      date: {is: "2020-11-29"}
      options: {limit: 10}
      baseCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
      quoteCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
    ) {
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      quotePrice
    }
  }
}

query UniswapOhlcData5MinuteCandleUsdtweth {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100000, asc: "timeInterval.minute"}
      date: {since: "2021-04-21"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query CakeusdtCurrentPrice {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
      options: {desc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
      price
    }
  }
}

query UsdtethDailyVolume {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.day"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      timeInterval {
        day(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
      tradeAmount(in: USDT)
    }
  }
}

query TradesForASpecificTokenOnThePancakedex {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height", limit: 1}
      exchangeName: {in: ["Pancake", "Pancake v2"]}
      baseCurrency: {is: "0x36c0556c2b15aed79f842675ff030782738ef9e8"}
      date: {after: "2021-04-28"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query TokenVolumeOnUniswap {
  ethereum {
    dexTrades(
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      count
      tradeAmount(in: USD)
    }
  }
}

query BitcoinDailyTransactionVolume($from: ISO8601DateTime, $till: ISO8601DateTime) {
  bitcoin {
    transactions(options: {desc: "date.date"}, date: {since: $from, till: $till}) {
      txVolUSD: inputValue(calculate: sum, in: USD)
      date {
        date
      }
    }
  }
}

query TransactionsRelatedToAnAddressAfterCertainBlockHeight($network: EthereumNetwork!, $address: String!, $limit: Int!, $offset: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "block.timestamp.time", limit: $limit, offset: $offset}
      date: {since: $from, till: $till}
      height: {gt: 9000000}
      smartContractAddress: {is: $address}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      smartContractMethod {
        name
        signatureHash
      }
      address: caller {
        address
        annotation
      }
      transaction {
        hash
      }
      gasValue
      external
    }
  }
}

query TopTradesByUsdAmountInDex {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "tradeAmount"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
    }
  }
}

query TopGasBurnersInDexTrades {
  ethereum {
    dexTrades(options: {desc: "gasValue", limit: 10}, date: {after: "2020-10-01"}) {
      count
      txs: count(uniq: txs)
      protocol
      exchange {
        fullName
      }
      gasValue
      transaction {
        hash
      }
      buyAmount
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      tradeIndex
    }
  }
}

query PancakeTotalVolumeAndTrades {
  ethereum(network: bsc) {
    dexTrades {
      baseCurrency {
        address
        decimals
        name
        symbol
        tokenId
        tokenType
      }
    }
  }
}

query BandProtocolOracleReadings {
  ethereum(network: bsc_testnet) {
    smartContractEvents(
      options: {desc: "block.height", limit: 10}
      smartContractEvent: {is: "RefDataUpdate(string,uint64,uint64,uint64)"}
      smartContractAddress: {is: "0x56761c813fecb76b4df87ddb1912f5855b22ae5a"}
    ) {
      block {
        height
        timestamp {
          time
        }
      }
      transaction {
        hash
      }
      eventIndex
      arguments {
        value
        argument
      }
    }
  }
}

query InflowOutflowForAddress {
  ethereum {
    out: transfers(
      currency: {is: "ETH"}
      date: {is: "2020-06-11"}
      options: {asc: "out"}
      any: [{sender: {is: "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"}}, {receiver: {is: "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"}}]
    ) {
      in: amount(receiver: {is: "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"})
      out: amount(sender: {is: "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"})
      currency {
        symbol
      }
      transaction {
        hash
      }
    }
  }
}

query BalancesQueryWithTimeFilterExample {
  ethereum {
    address(address: {is: "0xC11b1268C1A384e55C48c2391d8d480264A3A7F4"}) {
      balances(time: {till: "2019-07-17T35:04+00:00"}) {
        value
        currency {
          symbol
        }
      }
    }
  }
}

query HoprChannelsUsersInTitlisBsc($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      smartContractAddress: {is: $address}
      height: {gt: 3970950}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query NewQuery {
  ethereum {
    dexTrades(options: {limit: 10, desc: "tradeAmount"}) {
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query BtcTransfers($network: EthereumNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: [String!]) {
  ethereum(network: $network) {
    transfers(
      options: {desc: "total"}
      date: {since: $from, till: $till}
      currency: {in: $address}
    ) {
      date {
        date: date
      }
      sender {
        address
      }
      receiver {
        address
      }
      currency {
        address
        symbol
      }
      total: amount
    }
  }
}

query BalancerPoolVolumeAtASpecificBlockHeight {
  ethereum {
    dexTrades(
      options: {desc: "count"}
      smartContractAddress: {is: "0x1eff8af5d577060ba4ac8a29a13525bb0ee2a3d5"}
      height: {lteq: 11404498}
    ) {
      count
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query BitcoinAndZcashFee {
  bitcoin {
    transactions(options: {asc: "date.date"}) {
      date: date {
        date(format: "%Y")
      }
      count: count
      feeValue
      avgFee: feeValue(calculate: average)
    }
  }
  zcash: bitcoin(network: zcash) {
    transactions(options: {asc: "date.date"}) {
      date: date {
        date(format: "%Y")
      }
      count: count
      feeValue
      avgFee: feeValue(calculate: average)
    }
  }
}

query LatestSwapsForABalancerPool {
  ethereum {
    arguments(
      smartContractAddress: {is: "0x1eff8af5d577060ba4ac8a29a13525bb0ee2a3d5"}
      smartContractEvent: {is: "LOG_SWAP"}
      options: {desc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query Top10TransactionSendersByDateInBsc {
  ethereum(network: bsc) {
    transactions(
      date: {since: "2020-11-15"}
      options: {desc: "Txs", asc: "date.date", limitBy: {each: "date.date", limit: 10}}
    ) {
      date {
        date
      }
      sender {
        address
      }
      gasValue
      Txs: count
    }
  }
}

query PancakeTradeVolumeForDifferentCurrencyPairs {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "tradeAmount"}
      exchangeName: {is: "Pancake"}
      date: {since: "2020-09-12", till: "2020-12-12"}
    ) {
      buyCurrency {
        address
        symbol
      }
      sellCurrency {
        address
        symbol
      }
      trades: count
      tradeAmount(in: USD)
    }
  }
}

query Top10TransactionSendersByDateInBscv1 {
  ethereum(network: bsc) {
    transactions(
      date: {since: "2020-11-15"}
      options: {desc: "Txs", asc: "date.date", limitBy: {each: "date.date", limit: 10}}
    ) {
      date {
        date
      }
      sender {
        address
      }
      gasValue
      Txs: count
    }
  }
}

query QueryAddressFirstLastTx {
  ethereum(network: bsc) {
    transactions(options: {desc: "count", limit: 10}) {
      sender {
        address
      }
      count
      first_tx_time: minimum(of: time)
      last_tx_time: maximum(of: time)
      first_tx_hash: minimum(of: time, get: tx_hash)
      last_tx_hash: maximum(of: time, get: tx_hash)
    }
  }
}

query PancakeswapDailyActiveUsers($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      smartContractAddress: {is: $address}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query GasCostsSpentByTradersOnDexExchanges {
  ethereum {
    dexTrades(options: {desc: "gasValue"}, date: {after: "2020-10-01"}) {
      exchange {
        fullName
      }
      gasValue
    }
  }
}

query BscWeeklyTxsSendersGascost($network: EthereumNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transactions(options: {desc: "date.date"}, date: {since: $from, till: $till}) {
      date {
        date: startOfInterval(unit: week, offset: 4)
      }
      gasValue
      gasValueAvg: gasValue(calculate: average)
      gasPrice
      avgGasPrice: gasPrice(calculate: average)
      medGasPrice: gasPrice(calculate: median)
      maxGasPrice: gasPrice(calculate: maximum)
      Txs: count
      Senders: count(uniq: senders)
    }
  }
}

query BurgerswapFactoryContractActiveUsersBsc($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      smartContractAddress: {is: $address}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query EthereumUniqueSendersByMonth {
  ethereum {
    transactions(options: {desc: "date.date", limit: 10}) {
      activeAddress: count(uniq: senders)
      date: date {
        date(format: "%Y-%m")
      }
    }
  }
  binanceSmartChain: ethereum(network: bsc) {
    transactions(options: {desc: "date.date", limit: 10}) {
      activeAddress: count(uniq: senders)
      date: date {
        date(format: "%Y-%m")
      }
    }
  }
}

query HowToGetFeeForDexTrades {
  ethereum {
    dexTrades(options: {desc: "gasValue", limit: 10}, date: {after: "2020-10-01"}) {
      count
      txs: count(uniq: txs)
      protocol
      exchange {
        fullName
      }
      gasValue
      transaction {
        hash
      }
      buyAmount
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      tradeIndex
    }
  }
}

query LimitbyExample {
  ethereum(network: bsc) {
    transactions(
      date: {since: "2020-11-15"}
      options: {desc: "Txs", asc: "date.date", limitBy: {each: "date.date", limit: 3}}
    ) {
      date {
        date
      }
      sender {
        address
      }
      gasValue(in: USD)
      Txs: count
    }
  }
}

query ConfluxDailyTransactionVolumeActiveAddressesTransactionCounts($from: ISO8601DateTime, $till: ISO8601DateTime) {
  conflux {
    transactions(options: {desc: "date.date"}, date: {since: $from, till: $till}) {
      txVolUSD: amount(calculate: sum, in: USD)
      txs: count
      activeAddresses: count(uniq: senders)
      averageGasPrice: gasPrice(calculate: average)
      date {
        date
      }
    }
  }
}

query SpecificBalancerPoolTradesUsingItsAddress {
  ethereum {
    dexTrades(
      options: {limit: 50, desc: "block.height"}
      smartContractAddress: {is: "0x1eff8af5d577060ba4ac8a29a13525bb0ee2a3d5"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query QueryKnownDexOnlyWithNames {
  ethereum {
    dexTrades(
      options: {desc: "tradeAmount", limit: 100}
      exchangeName: {not: ""}
      date: {since: "2020-01-01", till: null}
    ) {
      protocol
      exchange {
        name
      }
      tradeAmount(in: USD)
    }
  }
}

query NewlyCreatedBalancerPools {
  ethereum {
    arguments(
      smartContractAddress: {is: "0x9424b1412450d0f8fc2255faf6046b98213b76bd"}
      smartContractEvent: {is: "LOG_NEW_POOL"}
      options: {asc: "block.height", limit: 100}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query HackathonQueryBscWeeklyTxsSendersGascost {
  ethereum(network: bsc) {
    transactions(options: {desc: "date.date"}) {
      date {
        date: startOfInterval(unit: week, offset: 4)
      }
      totalGasUsed: gasValue
      totalGasUsedInUSD: gasValue(in: USD)
      gasValueAvgPerTx: gasValue(calculate: average)
      gasValueAvgPerTxInUSD: gasValue(calculate: average, in: USD)
      gasPrice
      avgGasPrice: gasPrice(calculate: average)
      medGasPrice: gasPrice(calculate: median)
      maxGasPrice: gasPrice(calculate: maximum)
      Txs: count
      Senders: count(uniq: senders)
    }
  }
}

query Link {
  ethereum {
    uniswap: dexTrades(
      options: {asc: "date.date"}
      smartContractAddress: {is: "0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974"}
    ) {
      exchange {
        fullName
      }
      taker {
        smartContract {
          contractType
        }
      }
      date {
        date
      }
      tradeAmount(in: USD)
      count
    }
    bancor: dexTrades(
      options: {asc: "date.date"}
      exchangeAddress: {is: "0x2f9ec37d6ccfff1cab21733bdadede11c823ccb0"}
      baseCurrency: {is: "0x514910771af9ca656af840dff83e8264ecf986ca"}
    ) {
      exchange {
        fullName
      }
      taker {
        smartContract {
          contractType
        }
      }
      date {
        date
      }
      tradeAmount(in: USD)
      count
    }
    sushiswap: dexTrades(
      options: {asc: "date.date"}
      smartContractAddress: {is: "0xc40d16476380e4037e6b1a2594caf6a6cc8da967"}
    ) {
      exchange {
        fullName
      }
      taker {
        smartContract {
          contractType
        }
      }
      date {
        date
      }
      tradeAmount(in: USD)
      count
    }
  }
}

query BitcoinActiveAddressesByMonth {
  bitcoin {
    inputs(options: {desc: ["month.year", "month.month"]}) {
      activeAddress: count(uniq: addresses)
      month: date {
        year
        month
      }
    }
  }
}

query PancakeAllSwapsOfAPool {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "Pancake"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query ExampleOfTimeQuery {
  ethereum {
    dexTrades(date: {since: "2020-11-24"}, time: {since: "2020-11-24T13:42:00"}) {
      count
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query LatestPancakeswapPairs {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {is: "pair"}
      options: {desc: "block.height", limit: 9}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query LatestPriceOfAPairOnUniswap {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 1, desc: "block.timestamp.time"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
    }
  }
}

query DexTradesVolumesMonthly {
  ethereum {
    dexTrades(options: {asc: ["date.year", "date.month"]}) {
      count
      tradeAmount(in: USD)
      date {
        year
        month
      }
    }
  }
}

query AggregateSmartContractArgument {
  ethereum(network: ethereum) {
    arguments(
      smartContractEvent: {is: "LOG_SWAP(address,address,address,uint256,uint256)"}
      smartContractAddress: {is: "0x003a70265a3662342010823bea15dc84c6f7ed54"}
      argument: {is: "tokenAmountIn"}
    ) {
      date {
        date(format: "%Y-%m-%d")
      }
      block {
        timestamp {
          hour
        }
      }
      number(calculate: sum)
    }
  }
}

query BalancerProtocolLatestTrades {
  ethereum {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "Balancer"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query ExampleOfTransferQueryWithAmountsInUsd {
  ethereum {
    transfers(
      options: {limit: 10, asc: "block.height"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      block {
        height
      }
      date {
        date
      }
      amount
      currency {
        symbol
      }
      amountInUsd: amount(in: USD)
    }
  }
}

query OceanComparisonBancorUniswap {
  ethereum {
    uniswap: dexTrades(
      options: {asc: "date.date"}
      smartContractAddress: {is: "0x9b7dad79fc16106b47a3dab791f389c167e15eb0"}
    ) {
      date {
        date
      }
      tradeAmount(in: USD)
      count
    }
    bancor: dexTrades(
      options: {asc: "date.date"}
      exchangeAddress: {is: "0x2f9ec37d6ccfff1cab21733bdadede11c823ccb0"}
      baseCurrency: {is: "0x967da4048cd07ab37855c090aaf366e4ce1b9f48"}
    ) {
      date {
        date
      }
      tradeAmount(in: USD)
      count
    }
  }
}

query UsdtethReserve {
  ethereum {
    arguments(
      smartContractAddress: {is: "0x1eff8af5d577060ba4ac8a29a13525bb0ee2a3d5"}
      smartContractEvent: {is: "LOG_SWAP"}
      options: {desc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query TopTradesByUsdAmountInDexv1 {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "tradeAmount"}
      date: {after: "2021-02-05"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query ExampleOfQueryBtcTxsList {
  bitcoin {
    transactions(
      date: {is: "2021-01-14"}
      options: {desc: "block.height", limit: 100}
    ) {
      hash
      block {
        height
      }
    }
  }
}

query TransferTotalSumOfTotal($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!) {
  ethereum(network: $network) {
    transfers(
      date: {since: $from, till: $till}
      amount: {gt: 0}
      options: {limit: $limit, offset: $offset, desc: "count_in"}
    ) {
      sum_in: amount(calculate: sum, receiver: {is: $address})
      sum_out: amount(calculate: sum, sender: {is: $address})
      count_in: count(receiver: {is: $address})
      count_out: count(sender: {is: $address})
      currency {
        address
        symbol
        tokenType
      }
    }
  }
}

query FilterByCurrency($network: EthereumNetwork!, $limit: Int!, $offset: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transfers(
      options: {desc: "count", limit: $limit, offset: $offset}
      amount: {gt: 0}
      date: {since: $from, till: $till}
      currency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
    ) {
      currency {
        symbol
        address
        name
      }
      count
      senders: count(uniq: senders)
      receivers: count(uniq: receivers)
      days: count(uniq: dates)
      from_date: minimum(of: date)
      till_date: maximum(of: date)
      amount
    }
  }
}

query PooledTokenForAWbnbcakePairOnPancake {
  ethereum(network: bsc) {
    address(address: {is: "0xa527a61703d82139f8a06bc30097cc9caa2df5a6"}) {
      balances {
        currency {
          symbol
        }
        value
      }
    }
  }
}

query BtcOutputExactly1btc($network: BitcoinNetwork!, $limit: Int!, $offset: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime, $outVal: Float!) {
  bitcoin(network: $network) {
    outputs(
      options: {desc: ["block.height", "transaction.index"], limit: $limit, offset: $offset}
      date: {since: $from, till: $till}
      outputValue: {is: $outVal}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      transaction {
        hash
        index
      }
      outputAddress {
        address
      }
    }
  }
}

query InboundOutboundTransactionsForBtcAddress {
  bitcoin(network: bitcoin) {
    inbound: coinpath(receiver: {is: "3CG5hs3YLhKg8zgxsxc8UPxBmFj4e4oBb2"}) {
      sender {
        address
        annotation
      }
      totalInbound: amount
      transactions {
        amount
        height
        timestamp
        txHash
        txValue
      }
    }
    outbound: coinpath(
      sender: {is: "3CG5hs3YLhKg8zgxsxc8UPxBmFj4e4oBb2"}
      receiver: {not: ""}
    ) {
      receiver {
        address
        annotation
      }
      totalOutbound: amount
      transactions {
        amount
        height
        timestamp
        txHash
        txValue
      }
    }
  }
}

query PancakePoolsVolumeForADate {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "count"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      date: {since: "2020-12-12", till: "2020-12-12"}
    ) {
      count
      tradeAmount(in: USD)
    }
  }
}

query Ethdai($baseAddress: String, $quoteAddress: String, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      baseCurrency: {is: $baseAddress}
      quoteCurrency: {is: $quoteAddress}
      date: {is: "2021-01-28"}
      priceAsymmetry: {lt: 0.7}
      any: [{tradeAmountUsd: {gt: 0.00001}}, {tradeAmountUsd: {is: 0}}]
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query TopTradesInDexByGasValueInUsd {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "gasValueUsd"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      gasValueUsd: gasValue(in: USD)
    }
  }
}

query BitcoinMonthlyInputAddresses {
  bitcoin {
    inputs(options: {asc: "month.date"}) {
      activeAddress: count(uniq: addresses)
      month: date {
        date(format: "%Y-%m")
      }
    }
  }
}

query PancakePools24HourTransfersData {
  ethereum(network: bsc) {
    transfers(
      currency: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      amount: {gt: 0}
      date: {since: "2020-12-12", till: "2020-12-12"}
    ) {
      currency {
        symbol
        address
      }
      average: amount(calculate: average)
      amount
      count
      days: count(uniq: dates)
      sender_count: count(uniq: senders)
      receiver_count: count(uniq: receivers)
      min_date: minimum(of: date)
      max_date: maximum(of: date)
    }
  }
}

query PancakeTradingVol {
  ethereum(network: bsc) {
    dexTrades(options: {limit: 5, desc: "date.date"}, exchangeName: {is: "Pancake"}) {
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      date {
        date: date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
    }
  }
}

query DexTradesVolumesMonthlyv1 {
  ethereum {
    dexTrades(options: {desc: ["date.year"]}) {
      count
      tradeAmount(in: USD)
      date {
        year
      }
    }
  }
}

query ConfluxGasSpentByDay($network: ConfluxNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  conflux(network: $network) {
    transactions(options: {asc: "date.date"}, date: {since: $from, till: $till}) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      gasValue(in: USD)
    }
  }
}

query DexExchangesByTradeAmounts {
  ethereum {
    dexTrades(options: {limit: 10, desc: "tradeAmount"}) {
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query NewQueryv1 {
  ethereum {
    dexTrades(options: {limit: 10, desc: "tradeAmount"}) {
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query HistoryOfBlockRewardsInUsd {
  ethereum {
    blocks {
      rewardInUsd: reward(in: USD)
      date {
        date
      }
    }
  }
}

query TransferTotalSumOfTotalv1($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!) {
  ethereum(network: $network) {
    transfers(
      date: {since: $from, till: $till}
      amount: {gt: 0}
      options: {limit: $limit, offset: $offset, desc: "count_in"}
    ) {
      sum_in: amount(calculate: sum, receiver: {is: $address})
      sum_out: amount(calculate: sum, sender: {is: $address})
      count_in: count(receiver: {is: $address})
      count_out: count(sender: {is: $address})
      currency {
        address
        symbol
        tokenType
      }
    }
  }
}

query TopTradesByUsdAmountInDexv2 {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "tradeAmount"}
      date: {after: "2019-12-31"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query PancakeOhlcDataWbnbbusd {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.minute"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      median_price: quotePrice(calculate: median)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query LatestTradesOnPancake {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "Pancake"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query NewQueryv2 {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "tradeAmount"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
    }
  }
}

query ConfluxBlocksOverTime($from: ISO8601DateTime, $till: ISO8601DateTime) {
  conflux {
    blocks(date: {since: $from, till: $till}) {
      count
      date {
        date
      }
    }
  }
}

query PancakePools24HourTransfersDatav1 {
  ethereum(network: bsc) {
    transfers(
      currency: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      date: {since: "2020-12-12", till: "2020-12-12"}
    ) {
      currency {
        symbol
        address
      }
      median: amount(calculate: median)
      average: amount(calculate: average)
      amount
      count
      days: count(uniq: dates)
      sender_count: count(uniq: senders)
      receiver_count: count(uniq: receivers)
      min_date: minimum(of: date)
      max_date: maximum(of: date)
    }
  }
}

query PancakePoolsVolumeDayWise {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "date.date"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
    ) {
      count
      tradeAmount(in: USD)
      date {
        date(format: "%y-%m-%d")
      }
    }
  }
}

query ExampleOfDexCandlestickPairQueryByAllExchangesProtocols($baseAddress: String, $quoteAddress: String, $from: ISO8601DateTime!, $to: ISO8601DateTime!, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      baseCurrency: {is: $baseAddress}
      quoteCurrency: {is: $quoteAddress}
      date: {between: [$from, $to]}
      priceAsymmetry: {lt: 0.7}
      any: [{tradeAmountUsd: {gt: 0.00001}}, {tradeAmountUsd: {is: 0}}]
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
        tokenId
      }
      buyAmount: baseAmount
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query Firstone {
  ethereum {
    dexTrades(options: {limit: 100, desc: "count"}) {
      count
      exchange {
        fullName
      }
    }
  }
}

query NewQueryv3 {
  ethereum {
    dexTrades(options: {desc: "gasValue", limit: 10}, date: {after: "2020-10-01"}) {
      count
      txs: count(uniq: txs)
      protocol
      exchange {
        fullName
      }
      gasValue
      transaction {
        hash
      }
      buyAmount
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      tradeIndex
    }
  }
}

query QueryMinMaxBlockPerDate {
  ethereum {
    blocks(date: {is: "2020-06-11"}) {
      minimum(of: block)
      maximum(of: block)
    }
  }
}

query TwtbusdSpreadInfo {
  ethereum(network: bsc) {
    dexTrades(
      date: {is: "2020-12-21"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x4b0f1812e5df2a09796481ff14017e6005508003"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      side
    }
  }
}

query CurveDexTradesByScDaily {
  ethereum {
    dexTrades(
      options: {asc: ["smartContract.address.address", "date.date"]}
      exchangeName: {is: "Curve"}
    ) {
      date {
        date
      }
      smartContract {
        address {
          address
        }
      }
      tradeAmount(in: USD)
    }
  }
}

query DexFilteringByTakerAddressTypeSmartContract {
  ethereum {
    dexTrades(date: {is: "2021-01-11"}, takerSmartContractType: {notIn: [None]}) {
      count
      taker {
        smartContract {
          contractType
        }
      }
    }
  }
}

query TxListInSpecificTimeframe($baseAddress: String, $quoteAddress: String, $from: ISO8601DateTime!) {
  ethereum(network: ethereum) {
    dexTrades(
      time: {between: ["2021-01-29T11:00:00Z", "2021-01-29T11:05:00Z"]}
      baseCurrency: {is: $baseAddress}
      quoteCurrency: {is: $quoteAddress}
      date: {since: $from}
      priceAsymmetry: {lt: 0.7}
      any: [{tradeAmountUsd: {gt: 0.00001}}, {tradeAmountUsd: {is: 0}}]
    ) {
      transaction {
        hash
      }
      tradeIndex
      protocol
      exchange {
        name
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query NewQueryv4 {
  ethereum {
    dexTrades(options: {asc: ["date.year", "date.month"]}) {
      count
      tradeAmount(in: USD)
      date {
        year
        month
      }
    }
  }
}

query DexTradeVolumeYearly {
  ethereum {
    dexTrades(options: {desc: ["date.year"]}) {
      count
      tradeAmount(in: USD)
      date {
        year
      }
    }
  }
}

query NewQueryv5 {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "gasValueUsd"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      gasValueUsd: gasValue(in: USD)
    }
  }
}

query BuildReward($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: [String!]) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "txsCount"}
      date: {since: $from, till: $till}
      smartContractAddress: {in: $address}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      smartContract {
        address {
          address
        }
      }
      txsCount: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query PooledTokenInAPancakePool {
  ethereum(network: bsc) {
    address(address: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}) {
      balances {
        currency {
          symbol
        }
        value
      }
    }
  }
}

query PancakePoolsVolumeDataFor24HoursOverTime {
  ethereum(network: bsc) {
    transfers(
      currency: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      date: {since: "2020-12-01", till: "2020-12-12"}
    ) {
      currency {
        symbol
        address
      }
      date: date {
        date(format: "%y-%m-%d")
      }
      average: amount(calculate: average)
      amount
      count
      days: count(uniq: dates)
      sender_count: count(uniq: senders)
      receiver_count: count(uniq: receivers)
      min_date: minimum(of: date)
      max_date: maximum(of: date)
    }
  }
}

query PancakeVolumeOverMonth {
  ethereum(network: bsc) {
    dexTrades(
      options: {asc: ["date.year", "date.month"]}
      exchangeName: {is: "Pancake"}
    ) {
      count
      tradeAmount(in: USD)
      date {
        year
        month
      }
    }
  }
}

query DodoDexTrades {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "block.height"}
      exchangeName: {is: "Dodo"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query BalancesQueryWithTimeFilterExamplev1 {
  ethereum {
    address(address: {is: "0x664706C3b5ccE1f2C7f89988ca5b804365E1f97b"}) {
      balances(time: {till: "2019-01-13T12:35:04+00:00"}) {
        value
        currency {
          symbol
        }
      }
    }
  }
}

query SliceByTakerScType {
  ethereum {
    uniswap: dexTrades(
      smartContractAddress: {is: "0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974"}
    ) {
      exchange {
        fullName
      }
      taker {
        smartContract {
          contractType
        }
      }
      tradeAmount(in: USD)
      count
    }
    bancor: dexTrades(
      exchangeAddress: {is: "0x2f9ec37d6ccfff1cab21733bdadede11c823ccb0"}
      baseCurrency: {is: "0x514910771af9ca656af840dff83e8264ecf986ca"}
    ) {
      exchange {
        fullName
      }
      taker {
        smartContract {
          contractType
        }
      }
      tradeAmount(in: USD)
      count
    }
    sushiswap: dexTrades(
      smartContractAddress: {is: "0xc40d16476380e4037e6b1a2594caf6a6cc8da967"}
    ) {
      exchange {
        fullName
      }
      taker {
        smartContract {
          contractType
        }
      }
      tradeAmount(in: USD)
      count
    }
  }
}

query QueryCoinpath($network: EthereumNetwork!, $address: String!, $inboundDepth: Int!, $outboundDepth: Int!, $limit: Int!, $currency: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    inbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $inboundDepth}
      options: {direction: inbound, asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
    outbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $outboundDepth}
      options: {asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
  }
}

query NewQueryv6($from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum {
    smartContractEvents(
      options: {desc: "date.date"}
      smartContractAddress: {is: "0x00000000219ab540356cbb839cbe05303d7705fa"}
      date: {since: $from, till: $till}
    ) {
      date {
        date: startOfInterval(unit: day)
      }
      smartContractEvent {
        __typename
        name
      }
      times: count
      uniqueCallers: count(uniq: callers)
    }
  }
}

query ExampleOfQueryWithTimestampWithZone {
  ethereum {
    dexTrades(date: {is: "2020-11-01"}, options: {limit: 10}) {
      transaction {
        hash
      }
      block {
        timestamp {
          time(format: "%Y-%m-%dT%H:%M:%SZ")
        }
      }
    }
  }
}

query PancakeUsdtcakePairLatestSwaps {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "Pancake"}
      smartContractAddress: {is: "0x3f3d4ce222a7c919ea7f0231471c77478e36fc0d"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query QueryScArgsForTheLatestEventSwap {
  ethereum(network: bsc) {
    arguments(
      options: {limitBy: {each: "sender", limit: 1}, desc: "block.height"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Swap"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      to: any(of: argument_value, argument: {is: "to"})
      amount0In: any(of: argument_value, argument: {is: "amount0In"})
      amount0Out: any(of: argument_value, argument: {is: "amount0Out"})
      amount1In: any(of: argument_value, argument: {is: "amount1In"})
      amount1Out: any(of: argument_value, argument: {is: "amount1Out"})
    }
  }
}

query PancakeSwapEventsNewApis {
  ethereum(network: bsc) {
    arguments(
      options: {limitBy: {each: "sender", limit: 1}, desc: "block.height"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Swap"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      to: any(of: argument_value, argument: {is: "to"})
      amount0In: any(of: argument_value, argument: {is: "amount0In"})
      amount0Out: any(of: argument_value, argument: {is: "amount0Out"})
      amount1In: any(of: argument_value, argument: {is: "amount1In"})
      amount1Out: any(of: argument_value, argument: {is: "amount1Out"})
    }
  }
}

query Asd {
  ethereum {
    dexTrades(options: {limit: 100, desc: "count"}) {
      count
      exchange {
        fullName
      }
    }
  }
}

query NewQueryv7 {
  ethereum {
    dexTrades(options: {desc: ["date.year"]}) {
      count
      tradeAmount(in: USD)
      date {
        year
      }
    }
  }
}

query QeueryName($address: [String!]) {
  ethereum(network: bsc) {
    transactions(txSender: {in: $address}) {
      sender {
        address
      }
      first_tx_time: minimum(of: date)
    }
  }
}

query CopyOfQeueryName($address: [String!]) {
  ethereum(network: bsc) {
    transactions(txSender: {in: $address}) {
      sender {
        address
      }
      first_tx_time: minimum(of: date)
    }
  }
}

query Test($network: EthereumNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!) {
  ethereum(network: $network) {
    dexTrades(
      options: {desc: "currencyAmount", limit: $limit, offset: $offset}
      date: {since: $from, till: $till}
    ) {
      baseCurrency {
        address
        symbol
        name
        decimals
      }
      count
      currencyAmount: baseAmount(in: USD)
      dates: count(uniq: dates)
      started: minimum(of: date)
    }
  }
}

query UsdtethDailyVolumev1 {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.day"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      timeInterval {
        day(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
      tradeAmount(in: USDT)
    }
  }
}

query Limit5ByCallerSc($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: [String!]) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {asc: "block.height", limitBy: {each: "caller.address", limit: 5}}
      date: {since: $from, till: $till}
      smartContractAddress: {in: $address}
    ) {
      block {
        height
      }
      date: date {
        date(format: $dateFormat)
      }
      caller {
        address
      }
      senders_address_amount: count(uniq: senders)
      txs: count
      external_txs: count(external: true)
      internal_txs: count(external: false)
      external_totalGas: gasValue(external: true)
      internal_totalGas: gasValue(external: false)
    }
  }
}

query AggregateSmartContractArgumentv1 {
  ethereum(network: ethereum) {
    arguments(
      smartContractEvent: {is: "LOG_SWAP(address,address,address,uint256,uint256)"}
      smartContractAddress: {is: "0x003a70265a3662342010823bea15dc84c6f7ed54"}
      argument: {is: "tokenAmountIn"}
    ) {
      date {
        date(format: "%Y-%m-%d")
      }
      block {
        timestamp {
          hour
        }
      }
      number(calculate: sum)
    }
  }
}

query AllPancakeMints {
  ethereum(network: bsc) {
    smartContractEvents(
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Mint"}
      options: {limit: 10, desc: "block.height"}
    ) {
      block {
        height
      }
      arguments {
        value
        argument
      }
    }
  }
}

query NewQueryv8 {
  ethereum {
    dexTrades(options: {limit: 100, desc: "count"}) {
      count
      exchange {
        fullName
      }
    }
  }
}

query Ghghgh($address: [String!]) {
  ethereum(network: bsc) {
    transactions(txSender: {in: $address}) {
      sender {
        address
      }
      first_tx_time: minimum(of: date)
    }
  }
}

query GraphqlAliasExample {
  ethereum {
    transactions(options: {desc: "date.date", limit: 10}) {
      activeAddress: count(uniq: senders)
      date: date {
        date(format: "%Y-%m")
      }
    }
  }
  binanceSmartChain: ethereum(network: bsc) {
    transactions(options: {desc: "date.date", limit: 10}) {
      activeAddress: count(uniq: senders)
      date: date {
        date(format: "%Y-%m")
      }
    }
  }
}

query ConfluxActiveAddresses {
  conflux {
    transactions {
      activeAddress: count(uniq: senders)
      date {
        date
      }
    }
  }
}

query NewQueryv9 {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "tradeAmount"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
    }
  }
}

query NewQueryv10 {
  ethereum {
    dexTrades(
      options: {limit: 10, desc: "tradeAmount"}
      date: {after: "2020-11-01"}
    ) {
      transaction {
        hash
      }
      tradeIndex
      date {
        date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
    }
  }
}

query NewQueryv11($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      smartContractAddress: {is: $address}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query Yuyu($address: [String!]) {
  ethereum(network: bsc) {
    transactions(txSender: {in: $address}) {
      sender {
        address
      }
      first_tx_time: minimum(of: date)
    }
  }
}

query Uiuiui($address: [String!]) {
  ethereum(network: bsc) {
    transactions(txSender: {in: $address}) {
      sender {
        address
      }
      first_tx_time: minimum(of: date)
    }
  }
}

query q787878($address: [String!]) {
  ethereum(network: bsc) {
    transactions(txSender: {in: $address}) {
      sender {
        address
      }
      first_tx_time: minimum(of: date)
    }
  }
}

query DiverisfyTradesOver0x {
  ethereum {
    dexTrades(exchangeName: {is: "DeversiFi"}) {
      count
      exchange {
        fullName
        address {
          address
          annotation
        }
      }
    }
  }
}

query ConfluxNetworkAverageMedianMaxMinGasValue {
  conflux {
    transactions {
      gasValueAvg: gasValue(calculate: average)
      gasValueMedian: gasValue(calculate: median)
      gasValueMax: gasValue(calculate: maximum)
      gasValueMinimum: gasValue(calculate: minimum)
    }
  }
}

query CopyOfDexExchanges {
  ethereum {
    dexTrades(options: {desc: "count"}) {
      count
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query CopyOfDexExchangesv1 {
  ethereum {
    dexTrades(options: {desc: "count"}) {
      count
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query SfpbnbLpFarm($network: EthereumNetwork!, $limit: Int!, $offset: Int!, $contract: String!, $event: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    smartContractEvents(
      options: {desc: "block.timestamp.time", limit: $limit, offset: $offset}
      smartContractAddress: {is: $contract}
      smartContractEvent: {is: $event}
      date: {since: $from, till: $till}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      smartContract {
        address {
          address
        }
      }
      transaction {
        hash
      }
    }
  }
}

query ReferenceAddressIsNotImplementedForCubequery {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      txFrom: {is: "0xcb9beb32743e7d55ed4176ec099edf52bdffaa07"}
      options: {desc: "block.height", limit: 9}
    ) {
      transaction {
        hash
      }
      callDepth
      block {
        height
      }
      token0_address: any(argument: {is: "token0"}, of: argument_value)
      token0_symbol: any(
        argument: {is: "token0"}
        of: argument_value
        as: token_symbol
      )
      token0_name: any(argument: {is: "token0"}, of: argument_value, as: token_name)
      token1_address: any(argument: {is: "token1"}, of: argument_value)
      token1_symbol: any(
        argument: {is: "token1"}
        of: argument_value
        as: token_symbol
      )
      token1_name: any(argument: {is: "token1"}, of: argument_value, as: token_name)
      pair_address: any(argument: {is: "pair"}, of: argument_value)
      pair_symbol: any(argument: {is: "pair"}, of: argument_value, as: token_symbol)
      pair_name: any(argument: {is: "pair"}, of: argument_value, as: token_name)
    }
  }
}

query ConfluxTotalTxSendersAndReceivers($network: ConfluxNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  conflux(network: $network) {
    transactions(date: {since: $from, till: $till}) {
      senders: count(uniq: senders)
      receivers: count(uniq: receivers)
      gasValue
    }
  }
}

query ReferenceAddressIsNotImplementedForCubequeryv1 {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      txFrom: {is: "0xcb9beb32743e7d55ed4176ec099edf52bdffaa07"}
      reference: {is: "0x47ff6511939ab379d7756b003f61010b9eab3077"}
      argument: {in: ["token0"]}
      options: {desc: "block.height", limit: 9}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
      transaction {
        hash
        txFrom {
          address
        }
      }
    }
  }
}

query ConfluxTotalTransfersSendersReceivers {
  conflux(network: conflux_tethys) {
    transfers(amount: {gt: 0}) {
      senders: count(uniq: senders)
      receivers: count(uniq: receivers)
      transfers: count(uniq: transfers)
    }
  }
}

query BogbusdPairPrice($baseAddress: String!, $quoteAddress: String!, $interval: Int) {
  ethereum(network: bsc) {
    dexTrades(
      date: {since: "2021-04-29"}
      baseCurrency: {is: $baseAddress}
      quoteCurrency: {is: $quoteAddress}
      exchangeName: {in: ["Pancake", "Pancake v2"]}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      buyAmountInUsd: baseAmount
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      sellAmountInUsd: quoteAmount
      tradeAmount(in: USD)
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query Bsc1inchV2AggregationProtocolTotalVolume {
  ethereum(network: bsc) {
    dexTrades(any: {txTo: {is: "0x111111254bf8547e7183e4bbfc36199f3cedf4a1"}}) {
      tradeAmount(in: USD)
      trades: count(uniq: txs)
      uniqueWallets: count(uniq: senders)
    }
  }
}

query Bsc1inchV3AggregationProtocolTotalVolume {
  ethereum(network: bsc) {
    dexTrades(any: {txTo: {is: "0x11111112542D85B3EF69AE05771c2dCCff4fAa26"}}) {
      tradeAmount(in: USD)
      trades: count(uniq: txs)
      uniqueWallets: count(uniq: senders)
    }
  }
}

query QueryPancakeswapPairsCreatedForToken {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      options: {asc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      any(
        of: argument_value
        argument: {is: "token0"}
        value: {in: "0x1af3b59a839e97e944c65177ab3a024b499133f8"}
      )
      transaction {
        txFrom {
          address
        }
        hash
      }
    }
  }
}

query CopyOfUsdPrice($baseAddress: String!, $quoteAddress: String!, $connector1: String!, $from: ISO8601DateTime!, $interval: Int) {
  ethereum(network: bsc) {
    dexTrades(
      any: [{baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $quoteAddress}}, {baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $connector1}}, {baseCurrency: {is: $connector1}, quoteCurrency: {is: $quoteAddress}}]
      date: {since: $from}
      tradeAmountUsd: {gt: 10}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
      }
      sellCurrency: quoteCurrency {
        symbol
      }
    }
  }
}

query TradesForASpecificTokenOnThePancakedexv1 {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height", limit: 1}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x36c0556c2b15aed79f842675ff030782738ef9e8"}
      date: {after: "2021-03-28"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query WeirdIssueChangingData {
  ethereum(network: bsc) {
    transfers(
      currency: {is: "0x9706874413ce8dc647a6303d4a257031ad85483e"}
      receiver: {is: "0x000000000000000000000000000000000000dead"}
    ) {
      currency {
        symbol
        address
      }
      amount
      transaction {
        hash
      }
    }
  }
}

query UbiLastPrice {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 1, desc: "block.timestamp.time"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0xdd1ad9a21ce722c151a836373babe42c868ce9a4"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
    }
  }
}

query AllTokensOfBscAddress {
  ethereum(network: bsc) {
    address(address: {is: "0x1425844319d9a7a375c8f0d05c528948ca2fe3ce"}) {
      balances {
        currency {
          symbol
          address
        }
        value
      }
    }
  }
}

query ListFegPairsOnBsc($in: [String!], $network: EthereumNetwork, $since: ISO8601DateTime) {
  ethereum(network: $network) {
    dexTrades(baseCurrency: {in: $in}, time: {since: $since}) {
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      quotePrice
      count
      buyAmount(in: USD)
      sellAmount(in: USD)
      smartContract {
        address {
          address
          annotation
        }
      }
    }
  }
}

query HederaEffectOfOutage {
  hedera {
    messages(date: {between: ["2021-03-12", "2021-03-13"]}) {
      hour: time {
        time(format: "%Y-%m-%dT%H:00:00")
      }
      count
    }
  }
}

query HederaMessagesSplitByTopics {
  hedera {
    messages(date: {between: ["2021-03-12", "2021-03-13"]}) {
      hour: time {
        time(format: "%Y-%m-%dT%H:00:00")
      }
      count
      entity {
        id
      }
    }
  }
}

query QueryBalanceBsc {
  ethereum(network: bsc) {
    address(address: {is: "0x441949e9F37A84A0E080Cc6E58247dEE9668D160"}) {
      balances {
        currency {
          symbol
          address
        }
        value
      }
    }
  }
}

query CakeCurrencyPriceUsingCakeusdtPair {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0xa4973ac278604e5b101aa1d5f224edaa49f77924"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
      options: {desc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query Pancake {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x36c0556c2b15aed79f842675ff030782738ef9e8"}
      date: {after: "2021-03-28"}
    ) {
      transaction {
        hash
      }
      block {
        height
      }
    }
  }
}

query NotReturningResults {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      options: {asc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      any(
        of: argument_value
        value: {in: "0x62A9B39e3F851dE684954e0b013997A96De1f7C8"}
      )
      transaction {
        txFrom {
          address
        }
        hash
      }
    }
  }
}

query ExampleForDexPie {
  ethereum {
    dexTrades(
      date: {since: "2021-01-01"}
      options: {desc: "tradeAmount", limit: 10}
    ) {
      count
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query NotReturningResultsv1 {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      options: {asc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      any(
        of: argument_value
        value: {in: "0x62A9B39e3F851dE684954e0b013997A96De1f7C8"}
      )
      transaction {
        txFrom {
          address
        }
        hash
      }
    }
  }
}

query BscDailyActiveAddressesTxs($network: EthereumNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transactions(options: {desc: "date.date"}, date: {since: $from, till: $till}) {
      date {
        date: startOfInterval(unit: day)
      }
      Txs: count
      Senders: count(uniq: senders)
      Senders_True: count(uniq: senders, success: true)
      Receiver: count(uniq: receivers)
    }
  }
}

query Mfxy_01($network: EthereumNetwork!, $address: String!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query CopyOfQueryThatExecutesSqlFastAndSlowRenders {
  ethereum(network: ethereum) {
    dexTrades(date: {since: "2020-08-08", till: null}, exchangeName: {not: ""}) {
      date {
        date(format: "%Y-%m-%d")
      }
      volume: tradeAmount(in: USD)
      count
      exchange {
        name
      }
    }
  }
}

query OracleEvents {
  ethereum(network: ethereum) {
    smartContractEvents(
      options: {desc: "block.timestamp.time", limit: 10, offset: 0}
      date: {since: "2021-03-14"}
      smartContractAddress: {is: "0x00c7a37b03690fb9f41b5c5af8131735c7275446"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      arguments {
        argument
        argumentType
        value
      }
      smartContractEvent {
        name
        signatureHash
      }
      transaction {
        hash
      }
    }
  }
}

query Allpricesquery {
  ethereum(network: bsc) {
    count0: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-21"}
      quoteCurrency: {not: "0xf859bf77cbe8699013d6dbc7c2b926aaf307f830"}
      baseCurrency: {is: "0xf859bf77cbe8699013d6dbc7c2b926aaf307f830"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count1: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2020-11-30"}
      quoteCurrency: {not: "0x12e34cdf6a031a10fe241864c32fb03a4fdad739"}
      baseCurrency: {is: "0x12e34cdf6a031a10fe241864c32fb03a4fdad739"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count2: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-21"}
      quoteCurrency: {not: "0x32dffc3fe8e3ef3571bf8a72c0d0015c5373f41d"}
      baseCurrency: {is: "0x32dffc3fe8e3ef3571bf8a72c0d0015c5373f41d"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count3: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2020-09-18"}
      quoteCurrency: {not: "0xf68c9df95a18b2a5a5fa1124d79eeeffbad0b6fa"}
      baseCurrency: {is: "0xf68c9df95a18b2a5a5fa1124d79eeeffbad0b6fa"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count4: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-21"}
      quoteCurrency: {not: "0xe4ae305ebe1abe663f261bc00534067c80ad677c"}
      baseCurrency: {is: "0xe4ae305ebe1abe663f261bc00534067c80ad677c"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count5: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-17"}
      quoteCurrency: {not: "0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63"}
      baseCurrency: {is: "0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count6: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-21"}
      quoteCurrency: {not: "0x603c7f932ed1fc6575303d8fb018fdcbb0f39a95"}
      baseCurrency: {is: "0x603c7f932ed1fc6575303d8fb018fdcbb0f39a95"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count7: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-03-11"}
      quoteCurrency: {not: "0x851f7a700c5d67db59612b871338a85526752c25"}
      baseCurrency: {is: "0x851f7a700c5d67db59612b871338a85526752c25"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count8: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-20"}
      quoteCurrency: {not: "0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8"}
      baseCurrency: {is: "0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count9: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-21"}
      quoteCurrency: {not: "0xa184088a740c695e156f91f5cc086a06bb78b827"}
      baseCurrency: {is: "0xa184088a740c695e156f91f5cc086a06bb78b827"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count10: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-20"}
      quoteCurrency: {not: "0xf952fc3ca7325cc27d15885d37117676d25bfda6"}
      baseCurrency: {is: "0xf952fc3ca7325cc27d15885d37117676d25bfda6"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count11: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-21"}
      quoteCurrency: {not: "0xe02df9e3e622debdd69fb838bb799e3f168902c5"}
      baseCurrency: {is: "0xe02df9e3e622debdd69fb838bb799e3f168902c5"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count12: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-16"}
      quoteCurrency: {not: "BNB"}
      baseCurrency: {is: "BNB"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count13: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-25"}
      quoteCurrency: {not: "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51"}
      baseCurrency: {is: "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
    count14: dexTrades(
      options: {asc: "timeInterval.minute", limitBy: {each: "timeInterval.minute", limit: 1}}
      date: {since: "2021-02-23"}
      quoteCurrency: {not: "0x88f1a5ae2a3bf98aeaf342d26b30a79438c9142e"}
      baseCurrency: {is: "0x88f1a5ae2a3bf98aeaf342d26b30a79438c9142e"}
    ) {
      timeInterval {
        minute(count: 30)
      }
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      usd_amount: tradeAmount(in: USD)
      tot_amount: baseAmount(calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query FilteredArguments {
  ethereum(network: ethereum) {
    arguments(
      options: {desc: "block.timestamp.time", limit: 10, offset: 0}
      date: {since: "2021-03-14"}
      smartContractMethod: {is: "submit"}
      argument: {is: "_submission"}
      smartContractAddress: {is: "0x00c7a37b03690fb9f41b5c5af8131735c7275446"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      transaction {
        hash
      }
      value {
        value
      }
    }
  }
}

query FenixswapTotalVolumeAndTrades {
  ethereum(network: bsc) {
    dexTrades(exchangeName: {is: "FenixSwap"}) {
      count
      tradeAmount(in: USD)
    }
  }
}

query TradesForASpecificTokenOnTheFenixswap {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "FenixSwap"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query FenixswapTradeVolumeForDifferentCurrencyPairs {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "tradeAmount"}
      exchangeName: {is: "FenixSwap"}
      date: {since: "2020-09-12", till: "2020-12-12"}
    ) {
      buyCurrency {
        address
        symbol
      }
      sellCurrency {
        address
        symbol
      }
      trades: count
      tradeAmount(in: USD)
    }
  }
}

query PieChartDexExchanges {
  ethereum {
    dexTrades(
      date: {since: "2021-01-01"}
      options: {desc: "tradeAmount", limit: 10}
    ) {
      count
      tradeAmount(in: USD)
      exchange {
        fullName
      }
    }
  }
}

query FenixswapNewPair {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0x22574998Bb242B74847089e435D552a5A30D109F"}
      smartContractEvent: {is: "PairCreated"}
      argument: {is: "token0"}
      options: {desc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query LineChartOfBscTxCount {
  binance {
    transactions {
      date {
        date
      }
      count
    }
  }
}

query LatestFenixswapPairs {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0x22574998Bb242B74847089e435D552a5A30D109F"}
      smartContractEvent: {is: "PairCreated"}
      argument: {is: "pair"}
      options: {desc: "block.height", limit: 9}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query BtcRewardByMonthByMiner($network: BitcoinNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  bitcoin(network: $network) {
    outputs(
      options: {asc: "date.month"}
      date: {since: $from, till: $till}
      txIndex: {is: 0}
      outputDirection: {is: mining}
      outputScriptType: {notIn: [nulldata, nonstandard]}
    ) {
      address: outputAddress {
        address
        annotation
      }
      date {
        month: date(format: $dateFormat)
      }
      reward: value
      count(uniq: blocks)
    }
  }
}

query FenixswapDailyActiveUsers($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      smartContractAddress: {is: $address}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query BtcRewardByDay($network: BitcoinNetwork!, $dateFormat: String!) {
  bitcoin(network: $network) {
    outputs(
      options: {asc: "date.date"}
      txIndex: {is: 0}
      outputDirection: {is: mining}
      outputScriptType: {notIn: [nulldata, nonstandard]}
    ) {
      date {
        date(format: $dateFormat)
      }
      reward: value
    }
  }
}

query BtcMoneyFlow($network: BitcoinNetwork!, $address: String!, $inboundDepth: Int!, $outboundDepth: Int!, $limit: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  bitcoin(network: $network) {
    inbound: coinpath(
      initialAddress: {is: $address}
      depth: {lteq: $inboundDepth}
      options: {direction: inbound, asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
      }
      receiver {
        address
        annotation
      }
      amount
      depth
      count
    }
    outbound: coinpath(
      initialAddress: {is: $address}
      depth: {lteq: $outboundDepth}
      options: {asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
      }
      receiver {
        address
        annotation
      }
      amount
      depth
      count
    }
  }
}

query Moooo($network: EthereumNetwork!, $address: String!, $inboundDepth: Int!, $outboundDepth: Int!, $limit: Int!, $currency: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    inbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $inboundDepth}
      options: {direction: inbound, asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
    outbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $outboundDepth}
      options: {asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
  }
}

query EventsForTxsByHash($network: EthereumNetwork, $txHashes: [String!]) {
  ethereum(network: $network) {
    smartContractEvents(txHash: {in: $txHashes}) {
      arguments {
        argument
        value
      }
      smartContractEvent {
        name
      }
      transaction {
        hash
      }
    }
  }
}

query AverageGasPriceInBscNetwork($network: EthereumNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transactions(
      options: {asc: "block.timestamp.time"}
      date: {since: $from, till: $till}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:00:00")
        }
      }
      medianGasPrice: gasPrice(calculate: median)
      averageGasPrice: gasPrice(calculate: average)
      minGasPrice: gasPrice(calculate: minimum)
      maxGasPrice: gasPrice(calculate: maximum)
    }
  }
}

query GraphOfMoneyFlowFor1inchDexInEth($network: EthereumNetwork!, $address: String!, $inboundDepth: Int!, $outboundDepth: Int!, $limit: Int!, $currency: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    inbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $inboundDepth}
      options: {direction: inbound, asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
    outbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $outboundDepth}
      options: {asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
  }
}

query Bsc0xApiFillsByDex($from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: bsc) {
    dexTrades(
      options: {asc: "date.date"}
      date: {since: $from, till: $till}
      txTo: {is: "0xdef1c0ded9bec7f1a1670819833240f027b25eff"}
    ) {
      date: date {
        date(format: "%Y-%m-%d")
      }
      exchange {
        fullName
      }
      count
      tradeAmount(in: USD)
    }
  }
}

query BinanceSmartChainTxPerDayv1 {
  ethereum(network: bsc) {
    transactions {
      date {
        date
      }
      count
    }
  }
}

query BscWeeklyTxsSendersAndGascost($network: EthereumNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transactions(options: {desc: "date.date"}, date: {since: $from, till: $till}) {
      date {
        date: startOfInterval(unit: week, offset: 4)
      }
      gasValue
      gasValueAvg: gasValue(calculate: average)
      gasPrice
      avgGasPrice: gasPrice(calculate: average)
      medGasPrice: gasPrice(calculate: median)
      maxGasPrice: gasPrice(calculate: maximum)
      Txs: count
      Senders: count(uniq: senders)
    }
  }
}

query Error_1MyQuery {
  ethereum(network: bsc) {
    smartContractCalls(
      date: {after: "2021-03-15"}
      options: {desc: "senders", limitBy: {each: "date.date", limit: 5}, limit: 100}
    ) {
      date {
        date
      }
      smartContract {
        address {
          address
          annotation
        }
      }
      amount
      senders: count(uniq: senders)
    }
  }
}

query Error_2 {
  ethereum(network: bsc) {
    smartContractCalls(
      options: {desc: "external_txs", limitBy: {each: "date.date", limit: 100}, limit: 100}
      date: {in: "2021-03-16"}
    ) {
      date {
        date: date
      }
      smartContract {
        address {
          address
          annotation
          __typename
        }
      }
      senders: count(uniq: senders)
      senders_external: count(uniq: senders, external: true)
      callers: count(uniq: callers)
      callers_external: count(uniq: callers, external: true)
      txs: count
      external_txs: count(external: true)
      internal_txs: count(external: false)
    }
  }
}

query EtheruemTransactionsOverTime {
  ethereum {
    transactions {
      date {
        date
      }
      count
    }
  }
}

query Error_2_fixMyQuery($network: EthereumNetwork!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "external_txs", limitBy: {each: "date.date", limit: 5}, limit: 100}
      date: {since: "2021-03-12", till: "2021-03-14"}
    ) {
      date {
        date: date
      }
      smartContract {
        address {
          address
          annotation
          __typename
        }
      }
      senders: count(uniq: senders)
      senders_external: count(uniq: senders, external: true)
      callers: count(uniq: callers)
      callers_external: count(uniq: callers, external: true)
      txs: count
      external_txs: count(external: true)
      internal_txs: count(external: false)
    }
  }
}

query NewQueryv12MyQuery {
  bitcoin {
    blocks(date: {after: "2021-04-02", before: "2021-05-02"}) {
      difficulty(difficulty: {})
      date {
        date
      }
    }
  }
}

query BtcGetTheAddressAnnotation {
  bitcoin(network: bitcoin) {
    inbound: coinpath(receiver: {is: "11111111111111111"}) {
      receiver {
        address
        annotation
      }
    }
  }
}

query QueryPancakeswapPairsForFegToken {
  ethereum(network: bsc) {
    arguments(
      smartContractEvent: {is: "PairCreated"}
      options: {desc: "block.height", limit: 100}
    ) {
      any(
        of: argument_value
        argument: {is: "token0"}
        value: {in: "0xacfc95585d80ab62f67a14c566c1b7a49fe91167"}
      )
      transaction {
        hash
      }
      block {
        height
      }
    }
  }
}

query StackTrace($network: EthereumNetwork, $txHashes: [String!]) {
  ethereum(network: $network) {
    smartContractCalls(txHash: {in: $txHashes}) {
      arguments {
        argument
        value
      }
      smartContractMethod {
        name
      }
      callDepth
      transaction {
        hash
      }
    }
  }
}

query MechanismBscTop100MostTransferredTokens {
  ethereum(network: bsc) {
    transfers(options: {desc: "count", limit: 100}, amount: {gt: 0}) {
      currency {
        symbol
        address
      }
      count
      senders: count(uniq: senders)
      receivers: count(uniq: receivers)
      days: count(uniq: dates)
      from_date: minimum(of: date)
      till_date: maximum(of: date)
      amount
    }
  }
}

query QuerySenderOrRecieverForFilecoin {
  filecoin {
    transfers(
      options: {desc: "block.height", limit: 10000}
      any: [{sender: {is: "f024633"}}, {receiver: {is: "f024633"}}]
    ) {
      sender {
        address
      }
      receiver {
        address
      }
      block {
        height
      }
      timestamp {
        time
      }
      callHash
      messageMethod {
        name
      }
      method {
        name
      }
      amount
      currency {
        symbol
      }
    }
  }
}

query QuerySenderReceiverForFilecoinSeparate {
  filecoin {
    inbound: transfers(
      options: {desc: "block.height", limit: 10000}
      receiver: {is: "f024633"}
    ) {
      sender {
        address
      }
      receiver {
        address
      }
      block {
        height
      }
      timestamp {
        time
      }
      callHash
      messageMethod {
        name
      }
      method {
        name
      }
      amount
      currency {
        symbol
      }
    }
    outbound: transfers(
      options: {desc: "block.height", limit: 10000}
      sender: {is: "f024633"}
    ) {
      sender {
        address
      }
      receiver {
        address
      }
      block {
        height
      }
      timestamp {
        time
      }
      callHash
      messageMethod {
        name
      }
      method {
        name
      }
      amount
      currency {
        symbol
      }
    }
  }
}

query MatterPair {
  ethereum(network: bsc) {
    dexTrades(
      options: {}
      exchangeName: {is: "Pancake"}
      buyCurrency: {is: "0x1C9491865a1DE77C5b6e19d2E6a5F1D7a6F2b25F"}
      date: {since: "2021-03-25"}
      time: {since: "2021-03-25T10:00:00"}
    ) {
      buyCurrency {
        address
        symbol
        name
      }
      sellCurrency {
        address
        symbol
        name
      }
      smartContract {
        address {
          address
        }
      }
      sellAmount
      buyAmount
      closePrice: maximum(of: block, get: price)
      time: maximum(of: block, get: time)
      trades: count
    }
  }
}

query Bsc0xApiPancakeVip($from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "currencyAmount"}
      date: {since: $from, till: $till}
      txTo: {is: "0xdef1c0ded9bec7f1a1670819833240f027b25eff"}
      exchangeName: {is: "Pancake"}
    ) {
      currency: baseCurrency {
        symbol
        address
      }
      count
      currencyAmount: baseAmount(in: USD)
      dates: count(uniq: dates)
      started: minimum(of: date)
    }
  }
}

query LabradorRetriever($network: EthereumNetwork!, $currency: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    dexTrades(
      buyCurrency: {is: $currency}
      date: {since: $from, till: $till}
      options: {asc: "timeInterval.day"}
    ) {
      timeInterval {
        day(count: 1)
      }
      count
      tradeAmount(in: USD)
    }
  }
}

query GetPairToken($address: String!) {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: $address}
    ) {
      smartContract {
        address {
          address
        }
      }
      block {
        height
      }
      buyCurrency {
        symbol
        address
      }
      sellCurrency {
        symbol
        address
      }
    }
  }
}

query CopyOfLatestCoinsPancake {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {not: "pair"}
      options: {desc: "block.height", limit: 100}
    ) {
      block {
        height
        timestamp {
          unixtime
        }
      }
      argument {
        name
        type
      }
      reference {
        address
        smartContract {
          currency {
            name
          }
        }
      }
    }
  }
}

query OhlcQuery($network: EthereumNetwork!, $starttime: ISO8601DateTime, $endtime: ISO8601DateTime) {
  ethereum(network: $network) {
    dexTrades(
      options: {desc: "USD", limit: 10}
      exchangeName: {is: "Pancake"}
      quoteCurrency: {in: ["0xe9e7cea3dedca5984780bafc599bd69add087d56", "0x8076c74c5e3f5852037f31ff0093eeb8c8add8d3"]}
      time: {since: $starttime, till: $endtime}
      baseCurrency: {in: ["0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"]}
    ) {
      exchange {
        name
      }
      block {
        timestamp {
          time(format: "%Y-%m-%d %H")
        }
      }
      baseCurrency {
        address
        symbol
      }
      quoteCurrency {
        address
        symbol
      }
      USD: tradeAmount(in: USD, calculate: sum)
      Txs: count
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query CakeCurrencyPriceUsingCakeusdtPairv1 {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
      options: {desc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query BitcoinBlocks {
  bitcoin {
    blocks(date: {since: "2021-01-01"}) {
      height
      blockHash
      blockVersion
      chainwork
      difficulty
      blockSize
      blockStrippedSize
      blockWeight
      count
      medianTime {
        iso8601
      }
      date {
        date
      }
    }
  }
}

query q($network: EthereumNetwork!, $limit: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime, $amount: Float!) {
  ethereum(network: $network) {
    transfers(
      options: {desc: "block.timestamp.time", limit: $limit}
      amount: {gt: $amount}
      time: {since: $from, till: $till}
      txHash: {is: "0x16fb974c3b7ee7effd88bd8ae10ca485ce32c17e016d4538c278b1ee946b3eee"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      sender {
        address
        annotation
      }
      receiver {
        address
        annotation
      }
      transaction {
        hash
      }
      Sumtotal: amount(calculate: sum)
      amount
      currency {
        symbol
      }
      external
    }
  }
}

query Shared {
  ethereum {
    dexTrades(options: {desc: ["date.year"]}) {
      numberOfTrades: count
      tradeAmount(in: USD)
      date {
        year
        month
      }
    }
  }
}

query PancakeTradingVolv1 {
  ethereum(network: bsc) {
    dexTrades(options: {limit: 5, desc: "date.date"}, exchangeName: {is: "Pancake"}) {
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      date {
        date: date
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
    }
  }
}

query Sharedv1 {
  ethereum {
    dexTrades(options: {desc: ["date.year"]}) {
      numberOfTrades: count
      tradeAmount(in: USD)
      date {
        year
        month
      }
    }
  }
}

query MilkBalanceOfHoldersMyQuery {
  ethereum(network: bsc) {
    address(address: {in: ["0x56F6c4513b79aD9950a823346C7eF1fBf64f73d5"]}) {
      address
      balances(
        currency: {is: "0xb7cef49d89321e22dd3f51a212d58398ad542640"}
        height: {between: [5873977, 115873979]}
      ) {
        value
      }
    }
  }
}

query Sadg {
  ethereum {
    dexTrades(options: {desc: ["date.year"]}) {
      numberOfTrades: count
      tradeAmount(in: USD)
      date {
        year
        month
      }
    }
  }
}

query Easybnb($network: EthereumNetwork!, $contract: String!, $event: String!) {
  ethereum(network: $network) {
    smartContractEvents(
      options: {desc: "block.timestamp.time"}
      smartContractAddress: {is: $contract}
      smartContractEvent: {is: $event}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      arguments {
        argument
        value
      }
    }
  }
}

query PancakeswapLotteryClaim {
  ethereum(network: bsc) {
    smartContractEvents(
      smartContractAddress: {is: "0x3C3f2049cc17C136a604bE23cF7E42745edf3b91"}
      smartContractEvent: {is: "Claim"}
      options: {desc: "block.height", limit: 500}
    ) {
      block {
        height
      }
      smartContractEvent {
        name
      }
      arguments {
        argument
        argumentType
        value
      }
    }
  }
}

query PancakeOhlcData {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "timeInterval.minute"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xb7f2bca9b034f8cc143339dd12bb31d3d50cf27a"}
      quoteCurrency: {is: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      median_price: quotePrice(calculate: median)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query SpDividends($network: EthereumNetwork!, $address: String!, $limit: Int!, $offset: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transfers(
      options: {desc: "block.timestamp.time", asc: "currency.symbol", limit: $limit, offset: $offset}
      date: {since: $from, till: $till}
      amount: {gt: 0}
      currency: {is: "SPARTA"}
      sender: {is: $address}
      receiver: {in: ["0x3de669c4f1f167a8afbc9993e4753b84b576426f", "0x86320acc1169e5a61a8b365aaba0f8ebadc872e0", "0x119c70f4605e07e4bb229e2360e203a1bbd52ce4", "0xbf6728454b96a36c720c1bbcae5773aaafd6959b", "0x2720ec9809f77e040d4682cf9f7294276b9ccc56"]}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      address: receiver {
        address
        annotation
      }
      currency {
        address
        symbol
      }
      amount
      transaction {
        hash
      }
      external
    }
  }
}

query TradesForASpecificTokenOnTheUniswap {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      baseCurrency: {is: "0x95b3497bBcCcc46a8F45F5Cf54b0878b39f8D96C"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      transaction {
        hash
      }
      smartContract {
        currency {
          name
        }
      }
      block {
        height
      }
      timeInterval {
        second
      }
      buyAmount
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellCurrency {
        symbol
        address
      }
      transaction {
        gasPrice
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
      }
      quotePrice
      side
    }
  }
}

query BethBalanceOnPancakelp($network: EthereumNetwork!, $address: String!, $time: ISO8601DateTime!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances(time: {till: $time}) {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query MdxPancake {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x9c65ab58d8d978db963e63f2bfb7121627e3a739"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
      options: {desc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query QueryByTxSenderDexTxsLimit10 {
  ethereum {
    dexTrades(
      txSender: {is: "0x740b097af71f55ab430b870b1aed9b4e00140460"}
      options: {desc: "block.height"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      tradeIndex
      protocol
      smartContract {
        address {
          address
        }
      }
      exchange {
        fullName
      }
      buyAmount
      buyCurrency {
        symbol
      }
      sellAmount
      sellCurrency {
        symbol
      }
    }
  }
}

query FmtPrice {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 1, desc: "block.timestamp.time"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0x99c6e435ec259a7e8d65e1955c9423db624ba54c"}
      quoteCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
    }
  }
}

query PancakeOhlcData5MinuteCandleUsdtweth {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1000, asc: "timeInterval.minute"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {is: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query GetBalanceHistory($network: EthereumNetwork!, $address: String!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances {
        history(currency: [{is: "vBTC"}]) {
          value
          block
          timestamp
          transferAmount
        }
      }
    }
  }
}

query CakeCurrencyPriceUsingCakeusdtPair10LastMinutes {
  ethereum(network: bsc) {
    smartContractCalls(
      success: true
      options: {limit: 10}
      date: {after: "2021-04-04"}
      smartContractAddress: {is: "0x05ff2b0db69458a0750badebc4f9e13add608c7f"}
    ) {
      smartContract {
        address {
          address
        }
        currency {
          decimals
          name
        }
        protocolType
      }
    }
  }
}

query BscTopTradedPairsOn0xApi {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "currencyAmount"}
      txTo: {is: "0xdef1c0ded9bec7f1a1670819833240f027b25eff"}
    ) {
      currency: baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      count
      currencyAmount: baseAmount(in: USD)
    }
  }
}

query HoprChannelsUsersInBienneGoerli($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      smartContractAddress: {is: $address}
      height: {gt: 3970950}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query CopyOfTest($base_token: String!, $quote_token: String!) {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 10000, asc: "timeInterval.minute"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: $base_token}
      quoteCurrency: {is: $quote_token}
    ) {
      timeInterval {
        minute(count: 5)
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
      block {
        height
        hash
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
    }
  }
}

query LatestPancakeTrades {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "block.height"}
      exchangeName: {is: "Pancake"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query DexTradesByProtocolsv1 {
  ethereum(network: bsc) {
    dexTrades(options: {limit: 100, desc: "date.date"}, date: {after: "2021-01-01"}) {
      date {
        date
      }
      exchange {
        name
        fullName
      }
      protocol
      USD: tradeAmount(in: USD)
      BTC: tradeAmount(in: BTC)
      ETH: tradeAmount(in: ETH)
      USDT: tradeAmount(in: USDT)
      count
    }
  }
}

query DexBsc {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "USD"}
      date: {in: "2021-01-01"}
      exchangeName: {is: "Pancake"}
    ) {
      date {
        date
      }
      exchange {
        name
        address {
          address
        }
      }
      buyCurrency {
        address
        symbol
      }
      sellCurrency {
        address
        symbol
      }
      USD: tradeAmount(in: USD)
      BTC: tradeAmount(in: BTC)
      ETH: tradeAmount(in: ETH)
      USDT: tradeAmount(in: USDT)
      count
    }
  }
}

query CurveScDexAddresses {
  ethereum {
    dexTrades(exchangeName: {is: "Curve"}) {
      exchange {
        address {
          address
          annotation
        }
      }
      count
      smartContract {
        address {
          address
          annotation
        }
      }
    }
  }
}

query JetmoonbnbPrice {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "timeInterval.minute"}
      baseCurrency: {is: "0x2e841bf1a959f5edcdc320053810ad86396f05ed"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      median_price: quotePrice(calculate: median)
    }
  }
}

query BaseQuoteQueryTradingvolDexBySymbol {
  ethereum {
    dexTrades(
      date: {is: "2020-11-29"}
      options: {limit: 10}
      baseCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
      quoteCurrency: {is: "0xdac17f958d2ee523a2206206994597c13d831ec7"}
    ) {
      exchange {
        name
        fullName
        fullNameWithId
        address {
          annotation
          __typename
        }
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      quotePrice
    }
  }
}

query KitHoldersAtEndOfMarchAirdrop($holders: [String!]) {
  ethereum {
    address(address: {in: $holders}) {
      address
      balances(
        currency: {is: "0x7866E48C74CbFB8183cd1a929cd9b95a7a5CB4F4"}
        date: {before: "2021-03-31"}
      ) {
        value
      }
    }
  }
}

query BscTradesPerBlock {
  ethereum(network: bsc) {
    dexTrades(date: {is: "2021-02-22"}) {
      block {
        height
        timestamp {
          time
        }
      }
      count
    }
  }
}

query NewPancakeswapCoins {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {not: "pair"}
      options: {desc: "block.height", limit: 1000}
    ) {
      block {
        height
        timestamp {
          unixtime
        }
      }
      reference {
        address
        smartContract {
          currency {
            name
          }
        }
      }
    }
  }
}

query CopyOfGetPairsDataInfoFromUniswap {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100}
      date: {between: ["2021-04-11", "2021-04-12"]}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0x7866E48C74CbFB8183cd1a929cd9b95a7a5CB4F4"}
    ) {
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
      smartContract {
        address {
          address
        }
      }
    }
  }
}

query Smartcontactevent {
  ethereum(network: bsc) {
    smartContractEvents(
      txHash: {is: "0x3450fee48e352ae9c457c77c004c2e9e44d5a7a3cd6f89fae988c9c8d3b4d3e2"}
    ) {
      eventIndex
      smartContract(
        smartContractAddress: {is: "0x9B989A7B8963f4b08eC094710e2966FB3c7F6C43"}
      ) {
        contractType
        protocolType
        address {
          address
          annotation
        }
        currency {
          address
          decimals
          name
          tokenId
          symbol
          tokenType
        }
      }
      arguments {
        __typename
        argumentType
        index
        value
        argument
      }
      smartContractEvent {
        signature
        name
        signatureHash
      }
    }
  }
}

query Cakeusdt($thisDate: ISO8601DateTime!) {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
      options: {desc: ["block.height", "transaction.index"]}
      date: {since: $thisDate}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query PancakeOhlcDataTradingPair {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.minute"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query LatestPairsOnPancake {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {not: "pair"}
      options: {desc: "block.height", limit: 100}
    ) {
      block {
        height
        timestamp {
          unixtime
        }
      }
      argument {
        name
        type
      }
      reference {
        address
        smartContract {
          currency {
            name
          }
        }
      }
    }
  }
}

query SmartcontractCallingSwapAndAnyOthers {
  ethereum(network: ethereum) {
    arguments(
      options: {limitBy: {each: "sender", limit: 1}, desc: "block.height"}
      smartContractAddress: {is: "0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc"}
      smartContractEvent: {is: "Swap"}
      txHash: {is: "0x29ba1d290b684ed8f5010d8cc83667a7ff10b2fb9da15a147544e2458f7e4a6f"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      smartContract {
        address {
          address
          annotation
        }
        currency {
          address
          name
        }
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      to: any(of: argument_value, argument: {is: "to"})
      amount0In: any(of: argument_value, argument: {is: "amount0In"})
      amount0Out: any(of: argument_value, argument: {is: "amount0Out"})
      amount1In: any(of: argument_value, argument: {is: "amount1In"})
      amount1Out: any(of: argument_value, argument: {is: "amount1Out"})
    }
  }
}

query NewlyCreatedEthereumTokens {
  ethereum {
    smartContractCalls(
      options: {desc: "block.height", limit: 10}
      smartContractMethod: {is: "Contract Creation"}
      smartContractType: {is: Token}
    ) {
      block {
        height
        timestamp {
          time
        }
      }
      smartContract {
        contractType
        address {
          address
          annotation
        }
        currency {
          name
          symbol
          decimals
          tokenType
        }
      }
    }
  }
}

query DexTradesByProtocolsv2 {
  ethereum {
    dexTrades(options: {limit: 100, desc: "count"}) {
      count
      protocol
    }
  }
}

query NewlyCreatedBscTokens {
  ethereum(network: bsc) {
    smartContractCalls(
      options: {desc: "block.height", limit: 10}
      smartContractMethod: {is: "Contract Creation"}
      smartContractType: {is: Token}
    ) {
      block {
        height
        timestamp {
          time
        }
      }
      smartContract {
        contractType
        address {
          address
          annotation
        }
        currency {
          name
          symbol
          decimals
          tokenType
        }
      }
    }
  }
}

query PancakeNewPair {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {is: "token0"}
      options: {desc: "block.height", limit: 10}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query CakeCurrencyPriceUsingCakeusdtPairv2 {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x706954491ebfd6b38e5b1e6f079dbefae0f5eba0"}
      quoteCurrency: {is: "0x55d398326f99059ff775485246999027b3197955"}
      options: {desc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query LatestPancakeswapPairsdan {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {in: "PairCreated"}
      argument: {is: "pair"}
      options: {desc: "block.height", limit: 3}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query TrackingBalance($network: EthereumNetwork!, $address: String!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query PancakeOhlcDatav1 {
  ethereum(network: bsc) {
    dexTrades(
      options: {asc: "timeInterval.minute", limit: 1}
      date: {is: "2021-05-05T18:16:41"}
      exchangeName: {in: ["Pancake", "Pancake v2"]}
      baseCurrency: {is: "0xFaa41A7DB72f0cB466De97df78A021D17DF966Ac"}
      quoteCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      quotePrice
      USD: tradeAmount(in: USD, calculate: sum)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      median_price: quotePrice(calculate: median)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query ElongatePrice {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "timeInterval.minute"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x2A9718defF471f3Bb91FA0ECEAB14154F150a385"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      median_price: quotePrice(calculate: median)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query Smartcontractcall($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {asc: "date.date"}
      date: {since: $from, till: $till}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      contracts: count(uniq: smart_contracts)
      callers: count(uniq: senders)
      methods: count(uniq: smart_contract_methods)
    }
  }
}

query LastPancakeTrade {
  ethereum(network: bsc) {
    dexTrades(date: {is: "2021-03-28"}, options: {limit: 1, desc: "block.height"}) {
      block {
        timestamp {
          time
        }
        height
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      median_price: quotePrice(calculate: median)
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query LatestWethdaiTrades {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100, desc: "block.height"}
      baseCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
      quoteCurrency: {is: "0x6b175474e89094c44da98b954eedeac495271d0f"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query TotalVolTradedUsdForTokenInPancakeswap {
  ethereum(network: bsc) {
    dexTrades(
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x4c79b8c9cB0BD62B047880603a9DEcf36dE28344"}
    ) {
      count
      tradeAmount(in: USD)
    }
  }
}

query GroupedByDayTotalVolTradedUsdForTokenInPancakeswap {
  ethereum(network: bsc) {
    dexTrades(
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x4c79b8c9cB0BD62B047880603a9DEcf36dE28344"}
    ) {
      count
      tradeAmount(in: USD)
      date {
        date
      }
    }
  }
}

query PancakswapMostTradedPairsPrice {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "tradeAmount"}
      exchangeName: {is: "Pancake"}
      date: {since: "2020-09-12", till: "2020-12-12"}
    ) {
      buyCurrency {
        address
        symbol
      }
      sellCurrency {
        address
        symbol
      }
      tradeAmount(in: USD)
      price
    }
  }
}

query Balancev3 {
  ethereum {
    blocks {
      date {
        year
      }
      count
    }
  }
}

query PancakeLpPools($address: [String!], $event: [String!]) {
  ethereum(network: bsc) {
    smartContractEvents(
      smartContractAddress: {in: $address}
      smartContractEvent: {in: $event}
      date: {since: "2021-02-11"}
    ) {
      date {
        dt: date
      }
      count(uniq: callers)
      smartContract {
        address {
          sc: address
        }
      }
    }
  }
}

query Bsc {
  binance {
    blocks {
      date {
        year
      }
      count
    }
  }
}

query LatestWethdaiTradesv1 {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 100, desc: "block.height"}
      baseCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
      quoteCurrency: {is: "0x6b175474e89094c44da98b954eedeac495271d0f"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      baseAmount
      baseAmountInUsd: buyAmount(in: USD)
      baseCurrency {
        symbol
        address
      }
      quoteAmount
      quoteAmountInUsd: sellAmount(in: USD)
      quoteCurrency {
        symbol
        address
      }
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query Thangquery {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {not: "pair"}
      options: {desc: "block.height", limit: 100}
    ) {
      block {
        height
        timestamp {
          unixtime
        }
      }
      argument {
        name
        type
      }
      reference {
        address
        smartContract {
          currency {
            name
          }
        }
      }
    }
  }
}

query BscBlockCount {
  binance {
    blocks {
      count
    }
  }
}

query FilecoinMinerRewardsTotalByDates {
  filecoin {
    blocks(options: {asc: "date.date"}) {
      date {
        date
      }
      reward
    }
  }
}

query ExampleOfQueryMultiplePairs($baseAddress: String!, $quoteAddress: String!, $connector1: String!, $connector2: String!, $from: ISO8601DateTime!, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      any: [{baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $quoteAddress}}, {baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $connector1}}, {baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $connector2}}, {baseCurrency: {is: $connector1}, quoteCurrency: {is: $quoteAddress}}, {baseCurrency: {is: $connector2}, quoteCurrency: {is: $quoteAddress}}]
      date: {since: $from}
      tradeAmountUsd: {gt: 10}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      buyAmountInUsd: baseAmount(in: USD)
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      sellAmountInUsd: quoteAmount(in: USD)
      tradeAmount(in: USD)
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query ExampleOfQueryPairsWithBasequoteAndConnectorsBetween($baseAddress: String!, $quoteAddress: String!, $baseConnectors: [String!], $quoteConnectors: [String!], $from: ISO8601DateTime!, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      any: [{baseCurrency: {is: $baseAddress}, quoteCurrency: {in: $quoteConnectors}}, {baseCurrency: {in: $baseConnectors}, quoteCurrency: {is: $quoteAddress}}]
      date: {since: $from}
      tradeAmountUsd: {gt: 10}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      buyAmountInUsd: baseAmount(in: USD)
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      sellAmountInUsd: quoteAmount(in: USD)
      tradeAmount(in: USD)
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query TradesForASpecificTokenOnThePancakedexv2 {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xd1587ee50e0333f0c4adcf261379a61b1486c5d2"}
      date: {after: "2021-03-28"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query Uniswap_new_pool {
  ethereum {
    arguments(
      smartContractAddress: {is: "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f"}
      smartContractEvent: {is: "PairCreated"}
      options: {desc: "block.height", limit: 3}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query QueryDexBaseQuotePricesv1($wallet: String) {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 10, desc: "timeInterval.second"}
      any: [{txSender: {is: $wallet}}, {txTo: {is: $wallet}}]
    ) {
      transaction {
        hash
      }
      buyCurrency {
        symbol
        address
        name
      }
      tradeAmount(in: ETH)
      sellCurrency {
        symbol
        address
        name
      }
      buyAmount
      sellAmount
      date {
        date
      }
      timeInterval {
        second
      }
      gasValue
      gasPrice
    }
  }
}

query ConvertingArgumentsAsTokenSymbolsNames {
  ethereum(network: ethereum) {
    arguments(
      smartContractAddress: {is: "0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac"}
      smartContractEvent: {is: "PairCreated"}
      options: {limit: 10}
    ) {
      transaction {
        hash
      }
      callDepth
      token0_address: any(argument: {is: "token0"}, of: argument_value)
      token0_symbol: any(
        argument: {is: "token0"}
        of: argument_value
        as: token_symbol
      )
      token0_name: any(argument: {is: "token0"}, of: argument_value, as: token_name)
      token1_address: any(argument: {is: "token1"}, of: argument_value)
      token1_symbol: any(
        argument: {is: "token1"}
        of: argument_value
        as: token_symbol
      )
      token1_name: any(argument: {is: "token1"}, of: argument_value, as: token_name)
      pair_address: any(argument: {is: "pair"}, of: argument_value)
      pair_symbol: any(argument: {is: "pair"}, of: argument_value, as: token_symbol)
      pair_name: any(argument: {is: "pair"}, of: argument_value, as: token_name)
    }
  }
}

query Sbdo {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "timeInterval.minute"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x0d9319565be7f53cefe84ad201be3f40feae2740"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      quoteCurrency {
        symbol
        address
      }
      quotePrice
    }
  }
}

query PancakeSwapDataForParticularPair {
  ethereum(network: bsc) {
    arguments(
      options: {limitBy: {each: "sender", limit: 1}, desc: "block.height"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Swap"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      to: any(of: argument_value, argument: {is: "to"})
      amount0In: any(of: argument_value, argument: {is: "amount0In"})
      amount0Out: any(of: argument_value, argument: {is: "amount0Out"})
      amount1In: any(of: argument_value, argument: {is: "amount1In"})
      amount1Out: any(of: argument_value, argument: {is: "amount1Out"})
    }
  }
}

query LatestPairCreatedOnPancakeSwap {
  ethereum(network: bsc) {
    arguments(
      options: {desc: "block.height", limit: 3}
      smartContractAddress: {}
      smartContractEvent: {is: "PairCreated"}
    ) {
      block {
        height
      }
      pair: any(of: argument_value, argument: {is: "pair"})
      token0: any(of: argument_value, argument: {is: "token0"})
      token0Name: any(of: argument_value, argument: {is: "token0"}, as: token_name)
      token1: any(of: argument_value, argument: {is: "token1"})
      token1Name: any(of: argument_value, argument: {is: "token1"}, as: token_name)
    }
  }
}

query TotalNumberOfPairsOnPancakeSwap {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
    ) {
      pair: count(uniq: values, argument: {is: "pair"})
    }
  }
}

query VaultBalance($network: EthereumNetwork!, $address: String!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query VltPrice {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x82DA15e36F23A4b603Bc8A57c27813F2fAEb04B2"}
      quoteCurrency: {is: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"}
      options: {desc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query TradesForASpecificTokenOnThePancakedexv3 {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x36c0556c2b15aed79f842675ff030782738ef9e8"}
      date: {after: "2021-03-28"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query ExampleQueryAllFromToTransfers {
  ethereum(network: bsc) {
    transfers(
      any: [{sender: {is: "0x5a384227b65fa093dec03ec34e111db80a040615"}}, {receiver: {is: "0x5a384227b65fa093dec03ec34e111db80a040615"}}]
    ) {
      block {
        timestamp {
          time
        }
      }
      currency {
        address
        symbol
        decimals
        tokenType
      }
      amount
      sender {
        address
      }
    }
  }
}

query PancakePairInfoTxBaseAndQuoteCurrencyCountQuotePrice {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "count"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
    ) {
      count
      tradeAmount(in: USD)
      baseCurrency {
        name
        symbol
      }
      quoteCurrency {
        name
        symbol
      }
      quotePrice
      tx_count: count(uniq: txs)
      baseAmount(in: USD)
      quoteAmount(in: USD)
    }
  }
}

query UniswapOhlcData5MinuteCandleUsdtwethv1 {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 100000, asc: "timeInterval.minute"}
      date: {since: "2021-04-26"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"}
      quoteCurrency: {is: "0x05b339b0a346bf01f851dde47a5d485c34fe220c"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query QueryWithParametersGET_OHLC_DAY($dates: [ISO8601DateTime!], $quote: String, $base: String, $time: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 20000, asc: "timeInterval.day"}
      date: {between: $dates}
      baseCurrency: {is: $base}
      quoteCurrency: {is: $quote}
    ) {
      timeInterval {
        day(count: $time)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query QueryTokenBalancesOfAYearnVault($network: EthereumNetwork!, $address: String!, $date: ISO8601DateTime!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balances(date: {before: $date}) {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query HoprChannelsUsersInTitlisBscv1($network: EthereumNetwork!, $dateFormat: String!, $address: String!) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "date.date"}
      date: {since: "2021-01-18", till: "2021-01-30"}
      smartContractAddress: {is: $address}
      height: {gt: 3970950}
    ) {
      date: date {
        date(format: $dateFormat)
      }
      count: count
      callers: count(uniq: senders)
      totalGas: gasValue
    }
  }
}

query CowFarm($network: EthereumNetwork!, $address: String!, $inboundDepth: Int!, $outboundDepth: Int!, $limit: Int!, $currency: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    inbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $inboundDepth}
      options: {direction: inbound, asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
    outbound: coinpath(
      initialAddress: {is: $address}
      currency: {is: $currency}
      depth: {lteq: $outboundDepth}
      options: {asc: "depth", desc: "amount", limitBy: {each: "depth", limit: $limit}}
      date: {since: $from, till: $till}
    ) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
  }
}

query MultiPairDexQuery($baseAddress: String!, $quoteAddress: String!, $connector1: String!, $from: ISO8601DateTime!, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      any: [{baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $quoteAddress}}, {baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $connector1}}, {baseCurrency: {is: $connector1}, quoteCurrency: {is: $quoteAddress}}]
      date: {since: $from}
      tradeAmountUsd: {gt: 10}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      buyAmountInUsd: baseAmount
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      sellAmountInUsd: quoteAmount
      tradeAmount(in: USD)
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query PancakesPairSwapEvent {
  ethereum(network: bsc) {
    arguments(
      options: {desc: "block.height", limit: 3}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Swap"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      to: any(of: argument_value, argument: {is: "to"})
      amount0In: any(of: argument_value, argument: {is: "amount0In"})
      amount0Out: any(of: argument_value, argument: {is: "amount0Out"})
      amount1In: any(of: argument_value, argument: {is: "amount1In"})
      amount1Out: any(of: argument_value, argument: {is: "amount1Out"})
    }
  }
}

query Balancev4($network: EthereumNetwork!, $address: String!) {
  ethereum(network: $network) {
    address(address: {is: $address}) {
      balance
      balances {
        currency {
          address
          symbol
          tokenType
          name
        }
        value
      }
    }
  }
}

query PancakesPairMintEvent {
  ethereum(network: bsc) {
    arguments(
      options: {desc: "block.height", limit: 3}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Mint"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      amount0: any(of: argument_value, argument: {is: "amount0"})
      amount1: any(of: argument_value, argument: {is: "amount1"})
    }
  }
}

query PancakesPairBurnEvent {
  ethereum(network: bsc) {
    arguments(
      options: {desc: "block.height", limit: 3}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      smartContractEvent: {is: "Burn"}
    ) {
      block {
        height
      }
      transaction {
        hash
      }
      sender: any(of: argument_value, argument: {is: "sender"})
      amount0: any(of: argument_value, argument: {is: "amount0"})
      amount1: any(of: argument_value, argument: {is: "amount1"})
      to: any(of: argument_value, argument: {is: "to"})
    }
  }
}

query BlockRewards {
  ethereum {
    blocks(date: {after: "2020-10-01"}) {
      date {
        date
      }
      count
      reward
    }
  }
}

query NrugPrice {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 1, desc: "timeInterval.minute"}
      baseCurrency: {is: "0x805208354ba01a0fe0b42934195ea298b9a731ea"}
    ) {
      timeInterval {
        minute(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      quotePrice
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query PancakePairsForAParticularToken {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      options: {limit: 10}
    ) {
      pair: any(of: argument_value, argument: {is: "pair"})
      token0: any(
        of: argument_value
        argument: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      )
      block {
        height
      }
    }
  }
}

query Bsc1inchUniqueUsersByMonth {
  binanceSmartChain: ethereum(network: bsc) {
    transactions(
      options: {desc: "date.date", limit: 10}
      txTo: {is: "0x111111254bf8547e7183e4bbfc36199f3cedf4a1"}
    ) {
      activeAddress: count(uniq: senders)
      date: date {
        date(format: "%Y-%m")
      }
    }
  }
}

query TradesByMonth1inchInUsd {
  ethereum(network: bsc) {
    dexTrades(any: {txTo: {is: "0x111111254bf8547e7183e4bbfc36199f3cedf4a1"}}) {
      date {
        month
        year
      }
      tradeAmount(in: USD)
    }
  }
}

query LatestTransactionOfASpecificTokenOnPancake {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height", limit: 1}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x36c0556c2b15aed79f842675ff030782738ef9e8"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query CreationBlockOfASmartContract {
  ethereum {
    smartContractCalls(
      smartContractMethod: {is: "Contract Creation"}
      smartContractAddress: {is: "0xb443dea978b39178cb05ae005074227a4390dfce"}
    ) {
      smartContract {
        address {
          address
        }
      }
      block {
        height
      }
    }
  }
}

query Getaffiliatetradesflashwallet($receiver: String!) {
  ethereum(network: ethereum) {
    transfers(
      options: {desc: "block.height"}
      amount: {gt: 0}
      sender: {is: "0x22F9dCF4647084d6C31b2765F6910cd85C178C18"}
      receiver: {is: $receiver}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      sender {
        address
        annotation
      }
      receiver {
        address
        annotation
      }
      currency {
        address
        symbol
        name
      }
      amount
      transaction {
        hash
      }
      external
    }
  }
}

query Test_2021_mar_31 {
  ethereum(network: bsc) {
    dexTrades(date: {in: "2021-03-25"}) {
      date {
        date
      }
      exchange {
        name
        address {
          address
        }
      }
      USD: tradeAmount(in: USD)
      BTC: tradeAmount(in: BTC)
      USDT: tradeAmount(in: USDT)
      count(uniq: address)
    }
  }
}

query LinkSmartContractAverageGasDetails {
  ethereum {
    smartContractCalls(
      time: {since: "2020-11-01", till: "2020-12-31"}
      external: true
      smartContractAddress: {is: "0x514910771af9ca656af840dff83e8264ecf986ca"}
    ) {
      gasValueAvg: gasValue(calculate: average, in: USD)
      gasValueMedian: gasValue(calculate: median, in: USD)
      gasValueMax: gasValue(calculate: maximum)
    }
  }
}

query SmartcontractDauTxsMyQuery($address1: [String!], $address2: [String!], $address3: [String!]) {
  ethereum(network: bsc) {
    smartContractCalls(options: {desc: "date.date"}, date: {in: "2021-02-25"}) {
      date {
        date(format: "%Y-%m-%d")
      }
      one_inch_external: count(
        uniq: callers
        smartContractAddress: {in: $address1}
        external: true
      )
      one_inch_internal: count(
        uniq: callers
        smartContractAddress: {in: $address1}
        external: false
      )
      ACryptoS: count(uniq: callers, smartContractAddress: {in: $address2})
      bDollar: count(uniq: callers, smartContractAddress: {in: $address3})
    }
  }
}

query TradesForAPairOnThePancakedex {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height"}
      exchangeName: {is: "Pancake"}
      smartContractAddress: {is: "0xbd1ec00b0d1cca9d5b28fbe0bb7d664238af2ffa"}
      height: {between: [6601336, 6603500]}
    ) {
      transaction {
        hash
        index
      }
      timeInterval {
        second
      }
      block {
        height
      }
      buyAmount
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellCurrency {
        symbol
        address
      }
    }
  }
}

query PriceForTokenOnBscPancake {
  ethereum(network: bsc) {
    count0: dexTrades(
      exchangeName: {is: "Pancake"}
      options: {limit: 9, asc: "quoteCurrency.symbol"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {is: "0x81a2ac1a5ee681af6113ed440f1e378d46c23ef2"}
    ) {
      quoteCurrency {
        symbol
        name
        address
      }
      baseCurrency {
        symbol
        address
        name
      }
      baseAmount
      quoteAmount
      trades: count
      quotePrice
      median_price: quotePrice(calculate: median)
    }
    count2: dexTrades(
      exchangeName: {is: "Pancake"}
      options: {limit: 9, asc: "quoteCurrency.symbol"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {in: ["0xd8f90438DDd9e99B581F49257D078E8E39fC5e31", "0x9b93c29595dd603f75854eba3c5f4ee078ee4454", "0x72eb1afddb5652e0f5c7b9a6cc1c3241348b16c6", "0x98fc5b3a39d712fa5a826df4f9c47bb6c0f6f8a9"]}
    ) {
      quoteCurrency {
        symbol
        name
        address
      }
      baseCurrency {
        symbol
        address
        name
      }
      baseAmount
      quoteAmount
      trades: count
      quotePrice
      median_price: quotePrice(calculate: median)
    }
  }
}

query QuerySmartcontractEventsForATransactionHash($network: EthereumNetwork!, $address: String!, $limit: Int!, $offset: Int!, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    smartContractCalls(
      options: {desc: "block.timestamp.time", limit: $limit, offset: $offset}
      date: {since: "2021-03-01", till: $till}
      txHash: {is: $address}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      smartContractMethod {
        name
        signatureHash
      }
      smartContract {
        contractType
      }
      address: caller {
        address
        annotation
      }
      transaction {
        hash
      }
      gasValue
      external
    }
  }
}

query TokenInfo($network: EthereumNetwork!, $tokens: [String!], $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transfers(
      currency: {in: $tokens}
      amount: {gt: 0}
      date: {since: $from, till: $till}
    ) {
      currency {
        symbol
        name
        address
      }
      median: amount(calculate: median)
      average: amount(calculate: average)
      amount
      count
      days: count(uniq: dates)
      sender_count: count(uniq: senders)
      receiver_count: count(uniq: receivers)
      min_date: minimum(of: time)
      max_date: maximum(of: time)
    }
  }
}

query Rebasedittomoney {
  ethereum(network: bsc) {
    smartContractEvents(
      options: {desc: "block.height", limit: 21}
      smartContractAddress: {is: "0xdaE0B6F111c62010a8dC6A003B02053C004cFFc1"}
    ) {
      transaction {
        hash
      }
      block {
        height
        timestamp {
          iso8601
          unixtime
        }
      }
      eventIndex
      arguments {
        value
        argument
      }
    }
  }
}

query BnbVsBusd {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
      time: {after: "2021-04-08T06:00:00Z"}
    ) {
      baseCurrency {
        address
        symbol
      }
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
      timeInterval {
        minute(format: "%FT%TZ", count: 60)
      }
      quoteCurrency {
        address
        symbol
        name
      }
    }
  }
}

query FilecoinMessages {
  filecoin {
    by_method: messages(options: {desc: "count"}) {
      count
      method {
        name
      }
    }
  }
}

query QuerymarketstatsGET_MARKETS_STATS($base: String!, $dates: [ISO8601DateTime!]) {
  ethereum(network: ethereum) {
    dexTrades(
      baseCurrency: {is: $base}
      date: {between: $dates}
      tradeAmountUsd: {gt: 10}
      priceAsymmetry: {lt: 0.05}
    ) {
      baseCurrency {
        symbol
        address
      }
      baseAmount
      baseAmountUSD: baseAmount(in: USD)
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      quoteAmountUSD: quoteAmount(in: USD)
      trades: count
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query LatestPriceOfATokenOnPancakeswap {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 2, desc: "block.timestamp.time"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"}
      quoteCurrency: {is: "0x92a42db88ed0f02c71d439e55962ca7cab0168b5"}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
    }
  }
}

query MelloBurnMelloFellow {
  ethereum(network: bsc) {
    address(address: {is: "0x000000000000000000000000000000000000dead"}) {
      balances(currency: {is: "0x651bfbb26455294408aabc61a7adf427bf149898"}) {
        currency {
          address
          symbol
          tokenType
        }
        value
      }
    }
  }
}

query YearnEventsOverTime($network: EthereumNetwork!) {
  ethereum(network: $network) {
    smartContractEvents(
      smartContractAddress: {is: "0x986b4AFF588a109c09B50A03f42E4110E29D353F"}
      smartContractEvent: {is: "StrategyReported"}
      options: {limit: 100}
    ) {
      eventIndex
      arguments {
        argument
        argumentType
        index
        value
      }
      transaction {
        hash
      }
    }
  }
}

query F2poolbtcflow {
  bitcoin {
    inbound: coinpath(
      initialAddress: {is: "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"}
      depth: {lteq: 2}
      options: {direction: inbound, asc: "depth", desc: "amount", limitBy: {each: "depth", limit: 10}}
    ) {
      sender {
        address
        annotation
      }
      receiver {
        address
        annotation
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
    outbound: coinpath(
      initialAddress: {is: "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"}
      depth: {lteq: 2}
      options: {asc: "depth", desc: "amount", limitBy: {each: "depth", limit: 10}}
    ) {
      sender {
        address
        annotation
      }
      receiver {
        address
        annotation
      }
      amount
      currency {
        symbol
      }
      depth
      count
    }
  }
}

query DexTradingvolCombineSameSymbol($symbol1: [String!]) {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "USD"}
      date: {in: "2021-01-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {in: $symbol1}
    ) {
      date {
        date
      }
      exchange {
        name
        address {
          address
        }
      }
      buyCurrency {
        address
        symbol
      }
      sellCurrency {
        address
        symbol
      }
      USD: tradeAmount(in: USD)
      BTC: tradeAmount(in: BTC)
      ETH: tradeAmount(in: ETH)
      USDT: tradeAmount(in: USDT)
      count
    }
  }
}

query PancakePairTradingvol {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "USD", limitBy: {each: "date.date", limit: 100}}
      exchangeName: {is: "Pancake"}
      baseCurrency: {in: ["0xe9e7cea3dedca5984780bafc599bd69add087d56", "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c", "0x55d398326f99059fF775485246999027B3197955", "0x57067a6bd75c0e95a6a5f158455926e43e79beb0", "0xe9e7cea3dedca5984780bafc599bd69add087d56", "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd", "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7", "0x7083609fce4d1d8dc0c979aab8c869ea2c873402", "0xe0e514c71282b6f4e823703a39374cf58dc3ea4f", "0x111111111117dc0aa78b770fa6a738034120c302", "0x4197c6ef3879a08cd51e5560da5064b773aa1d29", "0x5b17b4d5e4009b5c43e3e3d63a5229f794cba389", "0x83d69ef5c9837e21e2389d47d791714f5771f29b", "0xeb7dc7b3bff60a450eff31edf1330355361ea5ad", "0x49440376254290b3264183807a16450457f02b28", "0xd3debe4a971e4492d0d61ab145468a5b2c23301b", "0x72faa679e1008ad8382959ff48e392042a8b06f7", "0x8f0528ce5ef7b51152a59745befdd91d97091d2f", "0xa184088a740c695e156f91f5cc086a06bb78b827", "0xe02df9e3e622debdd69fb838bb799e3f168902c5", "0x190b589cf9fb8ddeabbfeae36a813ffb2a702454", "0x0d9319565be7f53cefe84ad201be3f40feae2740", "0xca3f508b8e4dd382ee878a314789373d80a5190a", "0xf859bf77cbe8699013d6dbc7c2b926aaf307f830", "0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4", "0x250632378e573c6be1ac2f97fcdf00515d0aa91b", "0x52ce071bd9b1c4b00a0b92d298c512478cad67e8", "0xba2ae424d960c26247dd6c32edc70b295c744c43", "0x2170ed0880ac9a755fd29b2688956bd959f933f8", "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d", "0x55d398326f99059ff775485246999027b3197955", "0x48dc0190df5ece990c649a7a07ba19d3650a9572", "0xf388ee045cab30321db3fb69eab7dfb0c20f10ec", "0x5ac52ee5b2a633895292ff6d8a89bb9190451587", "0x78650b139471520656b9e7aa7a5e9276814a38e9", "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51", "0xc40c9a843e1c6d01b7578284a9028854f6683b1b", "0xbc5609612b7c44bef426de600b5fd1379db2ecf1", "0xf05e45ad22150677a017fbd94b84fbb63dc9b44c", "0x80d5f92c2c8c682070c95495313ddb680b267320", "0x25e9d05365c867e59c1904e7463af9f312296f9e", "0xab301dae71f5b386c566f484e636aee60318f12f", "0x233d91a0713155003fc4dce0afa871b508b3b715", "0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2", "0xe6df05ce8c8301223373cf5b969afcb1498c5528", "0x658a109c5900bc6d2357c87549b651670e5b0539", "0xf952fc3ca7325cc27d15885d37117676d25bfda6", "0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8", "0x2090c8295769791ab7a3cf1cc6e0aa19f35e441a", "0x10702bebd7d15507f4ed2078bc76da44d3bef060", "0xc13b7a43223bb9bf4b69bd68ab20ca1b79d81c75", "0x7979f6c54eba05e18ded44c4f986f49a5de551c2", "0x23e8a70534308a4aaf76fb8c32ec13d17a3bd89e", "0x762539b45a1dcce3d36d080f74d1aed37844b878", "0x35e869b7456462b81cdb5e6e42434bd27f3f788c", "0x242e46490397acca94ed930f2c4edf16250237fa", "0xeccf35f941ab67ffcaa9a1265c2ff88865caa005", "0x23396cf899ca06c4472205fc903bdb4de249d6fc", "0xffbdb9bdcae97a962535479bb96cc2778d65f4dd", "0x7d5f9f8cf59986743f34bc137fc197e2e22b7b05", "0x41d74991509318517226755e508695c4d1ce43a6", "0x5b6dcf557e2abe2323c48445e8cc948910d8c2c9", "0x900aeb8c40b26a8f8dfaf283f884b03ee7abb3ec", "0x62d71b23bf15218c7d2d7e48dbbd9e9c650b173f", "0xf215a127a196e3988c09d052e16bcfd365cd7aa3", "0xa04f060077d90fe2647b61e4da4ad1f97d6649dc", "0x1cb4183ac708e07511ac57a2e45a835f048d7c56", "0x7426ab52a0e057691e2544fae9c8222e958b2cfb", "0x0ab06caa3ca5d6299925efaa752a2d2154ece929", "0x3947b992dc0147d2d89df0392213781b04b25075", "0xca2f75930912b85d8b2914ad06166483c0992945", "0x1658aed6c7dbab2ddbd8f5d898b0e9eab0305813", "0x211e763d0b9311c08ec92d72ddc20ab024b6572a", "0x9cddf33466ce007676c827c76e799f5109f1843c", "0x92e744307694ece235cd02e82680ec37c657d23e", "0xacabd3f9b8f76ffd2724604185fa5afa5df25ac6", "0x4131b87f74415190425ccd873048c708f8005823", "0xa1303e6199b319a891b79685f0537d289af1fc83", "0xd7410c38a86dcf3d5ec0f75e9763111e07d9c95b", "0x7e3656fccf19583dc432fb3af813e53ea566814b", "0xf8645e8f6d7f88bdb2ae7fabdeb315f9259be5b0", "0xbfa0841f7a90c4ce6643f651756ee340991f99d5", "0x2eb5ecc40e403b12ee4428d70fddf34e2c2c27b0", "0xb9784c1633ef3b839563b988c323798634714368", "0x8b09b6eb1d263644a267dfb2b2bc8d6b0fb72e7d", "0x1a2fb0af670d0234c2857fad35b789f8cb725584", "0xf21768ccbc73ea5b6fd3c687208a7c2def2d966e", "0xd41fdb03ba84762dd66a0af1a6c8540ff1ba5dfb", "0xb0a51d5e242b6a86420ec34660b14d8b9cd4d5fc", "0x541e619858737031a1244a5d0cd47e5ef480342c", "0x849233ff1aea15d80ef658b2871664c9ca994063", "0x37109a51e712471bd2c72d8d70718627e7ff0032", "0xe40255c5d7fa7ceec5120408c78c787cecb4cfdb", "0x4b0f1812e5df2a09796481ff14017e6005508003", "0x896ede222d3f7f3414e136a2791bdb08aaa25ce0", "0x151b1e2635a717bcdc836ecd6fbb62b674fe3e1d", "0x2ff3d0f6990a40261c66e1ff2017acbc282eb6d0", "0x4bd17003473389a42daf6a0a729f6fdb328bbbd7", "0x882c173bc7ff3b7786ca16dfed3dfffb9ee7847b", "0x95c78222b3d6e262426483d42cfa53685a67ab9d", "0xa07c5b74c9b40447a954e1466938b865b6bbea36", "0xeca88125a5adbe82614ffc12d0db554e2e2867c8", "0xf508fcd89b8bd15579dc79a6827cb4686a3592c8", "0x334b3ecb4dca3593bccc3c7ebd1a1c1d1780fbf1", "0x972207a639cc1b374b893cc33fa251b55ceb7c07", "0x1610bc33319e9398de5f57b33a5b184c806ad217", "0xf91d58b5ae142dacc749f58a49fcbac340cb0343", "0x650b940a1033b8a1b1873f78730fcfc73ec11f1f", "0xfd5840cd36d94d7229439859c0112a4185bc0255", "0x57a5297f2cb2c0aac9d554660acd6d385ab50c6b", "0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63", "0x4f0ed527e8a95ecaa132af214dfd41f30b361600", "0x3f515f0a8e93f2e2f891ceeb3db4e62e202d7110", "0x44754455564474a89358b2c2265883df993b12f0", "0x55d398326f99059ff775485246999027b3197955"]}
      quoteCurrency: {notIn: ["0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "0x131224bb0270bc4b9bcd0e8216e0c6a7047af48a", "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51", "0xe0e514c71282b6f4e823703a39374cf58dc3ea4f", "0x111111111117dc0aa78b770fa6a738034120c302", "0x57067a6bd75c0e95a6a5f158455926e43e79beb0", "0x4197c6ef3879a08cd51e5560da5064b773aa1d29", "0x5b17b4d5e4009b5c43e3e3d63a5229f794cba389", "0x83d69ef5c9837e21e2389d47d791714f5771f29b", "0xeb7dc7b3bff60a450eff31edf1330355361ea5ad", "0x49440376254290b3264183807a16450457f02b28", "0xd3debe4a971e4492d0d61ab145468a5b2c23301b", "0x72faa679e1008ad8382959ff48e392042a8b06f7", "0x8f0528ce5ef7b51152a59745befdd91d97091d2f", "0xa184088a740c695e156f91f5cc086a06bb78b827", "0xe02df9e3e622debdd69fb838bb799e3f168902c5", "0x190b589cf9fb8ddeabbfeae36a813ffb2a702454", "0x0d9319565be7f53cefe84ad201be3f40feae2740", "0xca3f508b8e4dd382ee878a314789373d80a5190a", "0xf859bf77cbe8699013d6dbc7c2b926aaf307f830", "0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4", "0x250632378e573c6be1ac2f97fcdf00515d0aa91b", "0x52ce071bd9b1c4b00a0b92d298c512478cad67e8", "0xba2ae424d960c26247dd6c32edc70b295c744c43", "0x2170ed0880ac9a755fd29b2688956bd959f933f8", "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d", "0x55d398326f99059ff775485246999027b3197955", "0x48dc0190df5ece990c649a7a07ba19d3650a9572", "0xf388ee045cab30321db3fb69eab7dfb0c20f10ec", "0x5ac52ee5b2a633895292ff6d8a89bb9190451587", "0x78650b139471520656b9e7aa7a5e9276814a38e9", "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51", "0xc40c9a843e1c6d01b7578284a9028854f6683b1b", "0xbc5609612b7c44bef426de600b5fd1379db2ecf1", "0xf05e45ad22150677a017fbd94b84fbb63dc9b44c", "0x80d5f92c2c8c682070c95495313ddb680b267320", "0x25e9d05365c867e59c1904e7463af9f312296f9e", "0xab301dae71f5b386c566f484e636aee60318f12f", "0x233d91a0713155003fc4dce0afa871b508b3b715", "0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2", "0xe6df05ce8c8301223373cf5b969afcb1498c5528", "0x658a109c5900bc6d2357c87549b651670e5b0539", "0xf952fc3ca7325cc27d15885d37117676d25bfda6", "0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8", "0x2090c8295769791ab7a3cf1cc6e0aa19f35e441a", "0x10702bebd7d15507f4ed2078bc76da44d3bef060", "0xc13b7a43223bb9bf4b69bd68ab20ca1b79d81c75", "0x7979f6c54eba05e18ded44c4f986f49a5de551c2", "0x23e8a70534308a4aaf76fb8c32ec13d17a3bd89e", "0x762539b45a1dcce3d36d080f74d1aed37844b878", "0x35e869b7456462b81cdb5e6e42434bd27f3f788c", "0x242e46490397acca94ed930f2c4edf16250237fa", "0xeccf35f941ab67ffcaa9a1265c2ff88865caa005", "0x23396cf899ca06c4472205fc903bdb4de249d6fc", "0xffbdb9bdcae97a962535479bb96cc2778d65f4dd", "0x7d5f9f8cf59986743f34bc137fc197e2e22b7b05", "0x41d74991509318517226755e508695c4d1ce43a6", "0x5b6dcf557e2abe2323c48445e8cc948910d8c2c9", "0x900aeb8c40b26a8f8dfaf283f884b03ee7abb3ec", "0x62d71b23bf15218c7d2d7e48dbbd9e9c650b173f", "0xf215a127a196e3988c09d052e16bcfd365cd7aa3", "0xa04f060077d90fe2647b61e4da4ad1f97d6649dc", "0x1cb4183ac708e07511ac57a2e45a835f048d7c56", "0x7426ab52a0e057691e2544fae9c8222e958b2cfb", "0x0ab06caa3ca5d6299925efaa752a2d2154ece929", "0x3947b992dc0147d2d89df0392213781b04b25075", "0xca2f75930912b85d8b2914ad06166483c0992945", "0x1658aed6c7dbab2ddbd8f5d898b0e9eab0305813", "0x211e763d0b9311c08ec92d72ddc20ab024b6572a", "0x9cddf33466ce007676c827c76e799f5109f1843c", "0x92e744307694ece235cd02e82680ec37c657d23e", "0xacabd3f9b8f76ffd2724604185fa5afa5df25ac6", "0x4131b87f74415190425ccd873048c708f8005823", "0xa1303e6199b319a891b79685f0537d289af1fc83", "0xd7410c38a86dcf3d5ec0f75e9763111e07d9c95b", "0x7e3656fccf19583dc432fb3af813e53ea566814b", "0xf8645e8f6d7f88bdb2ae7fabdeb315f9259be5b0", "0xbfa0841f7a90c4ce6643f651756ee340991f99d5", "0x2eb5ecc40e403b12ee4428d70fddf34e2c2c27b0", "0xb9784c1633ef3b839563b988c323798634714368", "0x8b09b6eb1d263644a267dfb2b2bc8d6b0fb72e7d", "0x1a2fb0af670d0234c2857fad35b789f8cb725584", "0xf21768ccbc73ea5b6fd3c687208a7c2def2d966e", "0xd41fdb03ba84762dd66a0af1a6c8540ff1ba5dfb", "0xb0a51d5e242b6a86420ec34660b14d8b9cd4d5fc", "0x541e619858737031a1244a5d0cd47e5ef480342c", "0x849233ff1aea15d80ef658b2871664c9ca994063", "0x37109a51e712471bd2c72d8d70718627e7ff0032", "0xe40255c5d7fa7ceec5120408c78c787cecb4cfdb", "0x4b0f1812e5df2a09796481ff14017e6005508003", "0x896ede222d3f7f3414e136a2791bdb08aaa25ce0", "0x151b1e2635a717bcdc836ecd6fbb62b674fe3e1d", "0x2ff3d0f6990a40261c66e1ff2017acbc282eb6d0", "0x4bd17003473389a42daf6a0a729f6fdb328bbbd7", "0x882c173bc7ff3b7786ca16dfed3dfffb9ee7847b", "0x95c78222b3d6e262426483d42cfa53685a67ab9d", "0xa07c5b74c9b40447a954e1466938b865b6bbea36", "0xeca88125a5adbe82614ffc12d0db554e2e2867c8", "0xf508fcd89b8bd15579dc79a6827cb4686a3592c8", "0x334b3ecb4dca3593bccc3c7ebd1a1c1d1780fbf1", "0x972207a639cc1b374b893cc33fa251b55ceb7c07", "0x1610bc33319e9398de5f57b33a5b184c806ad217", "0xf91d58b5ae142dacc749f58a49fcbac340cb0343", "0x650b940a1033b8a1b1873f78730fcfc73ec11f1f", "0xfd5840cd36d94d7229439859c0112a4185bc0255", "0x57a5297f2cb2c0aac9d554660acd6d385ab50c6b", "0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63", "0x4f0ed527e8a95ecaa132af214dfd41f30b361600", "0x3f515f0a8e93f2e2f891ceeb3db4e62e202d7110", "0x44754455564474a89358b2c2265883df993b12f0", "0x7083609fce4d1d8dc0c979aab8c869ea2c873402", "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7", "0x55d398326f99059ff775485246999027b3197955", "0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd", "0x55d398326f99059fF775485246999027B3197955"]}
    ) {
      date {
        date
      }
      exchange {
        name
        address {
          address
        }
      }
      baseCurrency {
        address
        symbol
      }
      quoteCurrency {
        address
        symbol
      }
      USD: tradeAmount(in: USD, calculate: sum)
      USD_Avg: tradeAmount(in: USD, calculate: average)
      USD_Med: tradeAmount(in: USD, calculate: median)
      BTC: tradeAmount(in: BTC)
      USDT: tradeAmount(in: USDT)
      Takers: count(uniq: takers)
      Trades: count
      Trades_greater_10k: count(tradeAmountUsd: {gt: 10000})
      Trades_greater_50k: count(tradeAmountUsd: {gt: 50000})
      Trades_greater_100k: count(tradeAmountUsd: {gt: 100000})
      Trades_greater_500k: count(tradeAmountUsd: {gt: 500000})
    }
  }
}

query Shitshow {
  ethereum(network: bsc) {
    arguments(
      smartContractAddress: {is: "0xBCfCcbde45cE874adCB698cC183deBcF17952812"}
      smartContractEvent: {is: "PairCreated"}
      argument: {not: "pair"}
      options: {desc: "block.height", limit: 100}
    ) {
      block {
        height
        timestamp {
          unixtime
        }
      }
      argument {
        name
        type
      }
      reference {
        address
        smartContract {
          currency {
            name
          }
        }
      }
    }
  }
}

query PancakeDailyTradingvol {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "USD"}
      exchangeName: {is: "Pancake"}
      date: {after: "2021-03-24"}
    ) {
      date {
        date
      }
      exchange {
        name
        address {
          address
        }
      }
      USD: tradeAmount(in: USD)
      BTC: tradeAmount(in: BTC)
      ETH: tradeAmount(in: ETH)
      USDT: tradeAmount(in: USDT)
      count
      traders: count(uniq: senders)
      smartContract {
        currency {
          symbol
        }
      }
    }
  }
}

query DexAssetPriceIndex($baseAddress: String!, $quoteAddress: String!, $connector1: String!, $from: ISO8601DateTime!, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      any: [{baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $quoteAddress}}, {baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $connector1}}, {baseCurrency: {is: $connector1}, quoteCurrency: {is: $quoteAddress}}]
      date: {since: $from}
      tradeAmountUsd: {gt: 10}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      buyAmountInUsd: baseAmount
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      sellAmountInUsd: quoteAmount
      tradeAmount(in: USD)
      volume: quoteAmount
      trades: count
      averageQuotePrice: quotePrice(calculate: average)
    }
  }
}

query PancakeswapVolumePair {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "count"}
      smartContractAddress: {is: "0x1b96b92314c44b159149f7e0303511fb2fc4774f"}
      date: {since: "2020-12-12", till: "2020-12-12"}
    ) {
      count
      tradeAmount(in: USD)
    }
  }
}

query UniswapOhlcData5MinuteCandleUsdtwethv2 {
  ethereum(network: ethereum) {
    dexTrades(
      options: {limit: 5, asc: "timeInterval.minute"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Uniswap"}
      baseCurrency: {is: "0x95b3497bBcCcc46a8F45F5Cf54b0878b39f8D96C"}
      quoteCurrency: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query JudeQuery {
  ethereum(network: bsc) {
    dexTrades(
      options: {limitBy: {limit: 2, each: "baseCurrency.address"}, desc: "timeInterval.minute"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xdf6b2112c9d7ec7ea9f65a23a2e8e5bec562426f"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 1)
        day(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query JudeQueryv1 {
  ethereum(network: bsc) {
    dexTrades(
      options: {limitBy: {limit: 2, each: "baseCurrency.address"}, desc: "timeInterval.minute"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xdf6b2112c9d7ec7ea9f65a23a2e8e5bec562426f"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 1)
        day(count: 1)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query TradesForAnyWalletAddress {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "block.height", limit: 1}
      makerOrTaker: {is: "0xeF1F0eB4e392a45986D7cE889C95c086FB170E1e"}
      exchangeName: {in: ["Pancake", "Pancake v2"]}
      date: {after: "2021-04-28"}
    ) {
      transaction {
        hash
      }
      smartContract {
        address {
          address
        }
        contractType
        currency {
          name
        }
      }
      tradeIndex
      date {
        date
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
      sellAmountInUsd: sellAmount(in: USD)
      tradeAmount(in: USD)
      transaction {
        gasValue
        gasPrice
        gas
      }
    }
  }
}

query FilecoinUniqueMinersByDay {
  filecoin {
    blocks {
      date {
        date
      }
      uniq_miners: count(uniq: miners)
    }
  }
}

query FilecoinAverageMessageCostPerDay {
  filecoin {
    messages {
      date {
        date
      }
      average_cost: totalCost(calculate: average)
    }
  }
}

query MidasDollarOhlc15m {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 200, desc: "timeInterval.minute"}
      date: {since: "2020-11-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0x242E46490397ACCa94ED930F2C4EdF16250237fa"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
    ) {
      timeInterval {
        minute(count: 15)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query TradesForSpecificWallet {
  ethereum(network: bsc) {
    dexTrades(
      makerOrTaker: {is: "0xeF1F0eB4e392a45986D7cE889C95c086FB170E1e"}
      date: {after: "2021-03-01"}
    ) {
      transaction {
        hash
      }
      date: date {
        date(format: "%d/%m/%y %H:%M")
      }
      block {
        height
      }
      buyAmount
      buyAmountInUsd: buyAmount(in: USD)
      buyCurrency {
        symbol
        address
      }
      sellAmount
      sellAmountInUsd: sellAmount(in: USD)
      sellCurrency {
        symbol
        address
      }
    }
  }
}

query BinanceChainDexBnbDelegated($from: ISO8601DateTime, $till: ISO8601DateTime) {
  binance {
    transactions(
      options: {desc: "date.date"}
      date: {since: $from, till: $till}
      transactionType: {is: SIDECHAIN_DELEGATE}
    ) {
      date {
        date
      }
      transactionSource {
        name
      }
      currency {
        address
        symbol
      }
      count
      deposit
    }
  }
}

query CeloDailyUniqueReceivers {
  celo: ethereum(network: celo_rc1) {
    transfers(options: {limit: 30, desc: "date.date"}) {
      receiver: count(uniq: receivers)
      date: date {
        date(format: "%Y-%m-%d")
      }
    }
  }
}

query ChiTrades($network: EthereumNetwork!, $token: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    dexTrades(
      options: {desc: "amount"}
      date: {since: $from, till: $till}
      baseCurrency: {is: $token}
    ) {
      exchange {
        fullName
      }
      date {
        date
      }
      trades: count
      takers: count(uniq: takers)
      makers: count(uniq: makers)
      amount: baseAmount
      baseCurrency {
        symbol
      }
    }
  }
}

query AlgorandDailyReceivers {
  algorand {
    transfers(options: {limit: 30, desc: "date.date"}) {
      receiver: count(uniq: receivers)
      date: date {
        date(format: "%Y-%m-%d")
      }
    }
  }
}

query ConfluxDailyReceivers {
  conflux {
    transfers(options: {limit: 30, desc: "date.date"}) {
      receiver: count(uniq: receivers)
      date: date {
        date(format: "%Y-%m-%d")
      }
    }
  }
}

query UsdPrice($baseAddress: String!, $quoteAddress: String!, $connector1: String!, $from: ISO8601DateTime!, $interval: Int) {
  ethereum(network: ethereum) {
    dexTrades(
      any: [{baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $quoteAddress}}, {baseCurrency: {is: $baseAddress}, quoteCurrency: {is: $connector1}}, {baseCurrency: {is: $connector1}, quoteCurrency: {is: $quoteAddress}}]
      date: {since: $from}
      tradeAmountUsd: {gt: 10}
    ) {
      timeInterval {
        minute(format: "%FT%TZ", count: $interval)
      }
      buyCurrency: baseCurrency {
        symbol
        address
      }
      buyAmount: baseAmount
      buyAmountInUsd: baseAmount
      sellCurrency: quoteCurrency {
        symbol
        address
      }
      sellAmountInUsd: quoteAmount
      tradeAmount(in: USD)
      volume: quoteAmount
      trades: count
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
    }
  }
}

query PancakePairTradingvolv1 {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "USD"}
      date: {in: "2021-03-30"}
      exchangeName: {is: "Pancake"}
      quoteCurrency: {in: ["0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "", "0xe9e7cea3dedca5984780bafc599bd69add087d56", "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "0xe0e514c71282b6f4e823703a39374cf58dc3ea4f", "0x111111111117dc0aa78b770fa6a738034120c302", "0x4197c6ef3879a08cd51e5560da5064b773aa1d29", "0x5b17b4d5e4009b5c43e3e3d63a5229f794cba389", "0x83d69ef5c9837e21e2389d47d791714f5771f29b", "0xeb7dc7b3bff60a450eff31edf1330355361ea5ad", "0x49440376254290b3264183807a16450457f02b28", "0xd3debe4a971e4492d0d61ab145468a5b2c23301b", "0x72faa679e1008ad8382959ff48e392042a8b06f7", "0x8f0528ce5ef7b51152a59745befdd91d97091d2f", "0xa184088a740c695e156f91f5cc086a06bb78b827", "0xe02df9e3e622debdd69fb838bb799e3f168902c5", "0x190b589cf9fb8ddeabbfeae36a813ffb2a702454", "0x0d9319565be7f53cefe84ad201be3f40feae2740", "0xca3f508b8e4dd382ee878a314789373d80a5190a", "0xf859bf77cbe8699013d6dbc7c2b926aaf307f830", "0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4", "0x250632378e573c6be1ac2f97fcdf00515d0aa91b", "0x52ce071bd9b1c4b00a0b92d298c512478cad67e8", "0xba2ae424d960c26247dd6c32edc70b295c744c43", "0x2170ed0880ac9a755fd29b2688956bd959f933f8", "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d", "0x55d398326f99059ff775485246999027b3197955", "0x48dc0190df5ece990c649a7a07ba19d3650a9572", "0xf388ee045cab30321db3fb69eab7dfb0c20f10ec", "0x5ac52ee5b2a633895292ff6d8a89bb9190451587", "0x78650b139471520656b9e7aa7a5e9276814a38e9", "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51", "0xc40c9a843e1c6d01b7578284a9028854f6683b1b", "0xbc5609612b7c44bef426de600b5fd1379db2ecf1", "0xf05e45ad22150677a017fbd94b84fbb63dc9b44c", "0x80d5f92c2c8c682070c95495313ddb680b267320", "0x25e9d05365c867e59c1904e7463af9f312296f9e", "0xab301dae71f5b386c566f484e636aee60318f12f", "0x233d91a0713155003fc4dce0afa871b508b3b715", "0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2", "0xe6df05ce8c8301223373cf5b969afcb1498c5528", "0x658a109c5900bc6d2357c87549b651670e5b0539", "0xf952fc3ca7325cc27d15885d37117676d25bfda6", "0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8", "0x2090c8295769791ab7a3cf1cc6e0aa19f35e441a", "0x10702bebd7d15507f4ed2078bc76da44d3bef060", "0xc13b7a43223bb9bf4b69bd68ab20ca1b79d81c75", "0x7979f6c54eba05e18ded44c4f986f49a5de551c2", "0x23e8a70534308a4aaf76fb8c32ec13d17a3bd89e", "0x762539b45a1dcce3d36d080f74d1aed37844b878", "0x35e869b7456462b81cdb5e6e42434bd27f3f788c", "0x242e46490397acca94ed930f2c4edf16250237fa", "0xeccf35f941ab67ffcaa9a1265c2ff88865caa005", "0x23396cf899ca06c4472205fc903bdb4de249d6fc", "0xffbdb9bdcae97a962535479bb96cc2778d65f4dd", "0x7d5f9f8cf59986743f34bc137fc197e2e22b7b05", "0x41d74991509318517226755e508695c4d1ce43a6", "0x5b6dcf557e2abe2323c48445e8cc948910d8c2c9", "0x900aeb8c40b26a8f8dfaf283f884b03ee7abb3ec", "0x62d71b23bf15218c7d2d7e48dbbd9e9c650b173f", "0xf215a127a196e3988c09d052e16bcfd365cd7aa3", "0xa04f060077d90fe2647b61e4da4ad1f97d6649dc", "0x1cb4183ac708e07511ac57a2e45a835f048d7c56", "0x7426ab52a0e057691e2544fae9c8222e958b2cfb", "0x0ab06caa3ca5d6299925efaa752a2d2154ece929", "0x3947b992dc0147d2d89df0392213781b04b25075", "0xca2f75930912b85d8b2914ad06166483c0992945", "0x1658aed6c7dbab2ddbd8f5d898b0e9eab0305813", "0x211e763d0b9311c08ec92d72ddc20ab024b6572a", "0x9cddf33466ce007676c827c76e799f5109f1843c", "0x92e744307694ece235cd02e82680ec37c657d23e", "0xacabd3f9b8f76ffd2724604185fa5afa5df25ac6", "0x4131b87f74415190425ccd873048c708f8005823", "0xa1303e6199b319a891b79685f0537d289af1fc83", "0xd7410c38a86dcf3d5ec0f75e9763111e07d9c95b", "0x7e3656fccf19583dc432fb3af813e53ea566814b", "0xf8645e8f6d7f88bdb2ae7fabdeb315f9259be5b0", "0xbfa0841f7a90c4ce6643f651756ee340991f99d5", "0x2eb5ecc40e403b12ee4428d70fddf34e2c2c27b0", "0xb9784c1633ef3b839563b988c323798634714368", "0x8b09b6eb1d263644a267dfb2b2bc8d6b0fb72e7d", "0x1a2fb0af670d0234c2857fad35b789f8cb725584", "0xf21768ccbc73ea5b6fd3c687208a7c2def2d966e", "0xd41fdb03ba84762dd66a0af1a6c8540ff1ba5dfb", "0xb0a51d5e242b6a86420ec34660b14d8b9cd4d5fc", "0x541e619858737031a1244a5d0cd47e5ef480342c", "0x849233ff1aea15d80ef658b2871664c9ca994063", "0x37109a51e712471bd2c72d8d70718627e7ff0032", "0xe40255c5d7fa7ceec5120408c78c787cecb4cfdb", "0x4b0f1812e5df2a09796481ff14017e6005508003", "0x896ede222d3f7f3414e136a2791bdb08aaa25ce0", "0x151b1e2635a717bcdc836ecd6fbb62b674fe3e1d", "0x2ff3d0f6990a40261c66e1ff2017acbc282eb6d0", "0x4bd17003473389a42daf6a0a729f6fdb328bbbd7", "0x882c173bc7ff3b7786ca16dfed3dfffb9ee7847b", "0x95c78222b3d6e262426483d42cfa53685a67ab9d", "0xa07c5b74c9b40447a954e1466938b865b6bbea36", "0xeca88125a5adbe82614ffc12d0db554e2e2867c8", "0xf508fcd89b8bd15579dc79a6827cb4686a3592c8", "0x334b3ecb4dca3593bccc3c7ebd1a1c1d1780fbf1", "0x972207a639cc1b374b893cc33fa251b55ceb7c07", "0x1610bc33319e9398de5f57b33a5b184c806ad217", "0xf91d58b5ae142dacc749f58a49fcbac340cb0343", "0x650b940a1033b8a1b1873f78730fcfc73ec11f1f", "0xfd5840cd36d94d7229439859c0112a4185bc0255", "0x57a5297f2cb2c0aac9d554660acd6d385ab50c6b", "0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63", "0x4f0ed527e8a95ecaa132af214dfd41f30b361600", "0x3f515f0a8e93f2e2f891ceeb3db4e62e202d7110", "0x44754455564474a89358b2c2265883df993b12f0", "0x7083609fce4d1d8dc0c979aab8c869ea2c873402", "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7", "0x55d398326f99059ff775485246999027b3197955", "0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd", "0x55d398326f99059fF775485246999027B3197955"]}
      baseCurrency: {notIn: ["0xe9e7cea3dedca5984780bafc599bd69add087d56", "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "0x55d398326f99059fF775485246999027B3197955", "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd", "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7", "0x7083609fce4d1d8dc0c979aab8c869ea2c873402", "0xe0e514c71282b6f4e823703a39374cf58dc3ea4f", "0x111111111117dc0aa78b770fa6a738034120c302", "0x4197c6ef3879a08cd51e5560da5064b773aa1d29", "0x5b17b4d5e4009b5c43e3e3d63a5229f794cba389", "0x83d69ef5c9837e21e2389d47d791714f5771f29b", "0xeb7dc7b3bff60a450eff31edf1330355361ea5ad", "0x49440376254290b3264183807a16450457f02b28", "0xd3debe4a971e4492d0d61ab145468a5b2c23301b", "0x72faa679e1008ad8382959ff48e392042a8b06f7", "0x8f0528ce5ef7b51152a59745befdd91d97091d2f", "0xa184088a740c695e156f91f5cc086a06bb78b827", "0xe02df9e3e622debdd69fb838bb799e3f168902c5", "0x190b589cf9fb8ddeabbfeae36a813ffb2a702454", "0x0d9319565be7f53cefe84ad201be3f40feae2740", "0xca3f508b8e4dd382ee878a314789373d80a5190a", "0xf859bf77cbe8699013d6dbc7c2b926aaf307f830", "0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4", "0x250632378e573c6be1ac2f97fcdf00515d0aa91b", "0x52ce071bd9b1c4b00a0b92d298c512478cad67e8", "0xba2ae424d960c26247dd6c32edc70b295c744c43", "0x2170ed0880ac9a755fd29b2688956bd959f933f8", "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d", "0x55d398326f99059ff775485246999027b3197955", "0x48dc0190df5ece990c649a7a07ba19d3650a9572", "0xf388ee045cab30321db3fb69eab7dfb0c20f10ec", "0x5ac52ee5b2a633895292ff6d8a89bb9190451587", "0x78650b139471520656b9e7aa7a5e9276814a38e9", "0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51", "0xc40c9a843e1c6d01b7578284a9028854f6683b1b", "0xbc5609612b7c44bef426de600b5fd1379db2ecf1", "0xf05e45ad22150677a017fbd94b84fbb63dc9b44c", "0x80d5f92c2c8c682070c95495313ddb680b267320", "0x25e9d05365c867e59c1904e7463af9f312296f9e", "0xab301dae71f5b386c566f484e636aee60318f12f", "0x233d91a0713155003fc4dce0afa871b508b3b715", "0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2", "0xe6df05ce8c8301223373cf5b969afcb1498c5528", "0x658a109c5900bc6d2357c87549b651670e5b0539", "0xf952fc3ca7325cc27d15885d37117676d25bfda6", "0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8", "0x2090c8295769791ab7a3cf1cc6e0aa19f35e441a", "0x10702bebd7d15507f4ed2078bc76da44d3bef060", "0xc13b7a43223bb9bf4b69bd68ab20ca1b79d81c75", "0x7979f6c54eba05e18ded44c4f986f49a5de551c2", "0x23e8a70534308a4aaf76fb8c32ec13d17a3bd89e", "0x762539b45a1dcce3d36d080f74d1aed37844b878", "0x35e869b7456462b81cdb5e6e42434bd27f3f788c", "0x242e46490397acca94ed930f2c4edf16250237fa", "0xeccf35f941ab67ffcaa9a1265c2ff88865caa005", "0x23396cf899ca06c4472205fc903bdb4de249d6fc", "0xffbdb9bdcae97a962535479bb96cc2778d65f4dd", "0x7d5f9f8cf59986743f34bc137fc197e2e22b7b05", "0x41d74991509318517226755e508695c4d1ce43a6", "0x5b6dcf557e2abe2323c48445e8cc948910d8c2c9", "0x900aeb8c40b26a8f8dfaf283f884b03ee7abb3ec", "0x62d71b23bf15218c7d2d7e48dbbd9e9c650b173f", "0xf215a127a196e3988c09d052e16bcfd365cd7aa3", "0xa04f060077d90fe2647b61e4da4ad1f97d6649dc", "0x1cb4183ac708e07511ac57a2e45a835f048d7c56", "0x7426ab52a0e057691e2544fae9c8222e958b2cfb", "0x0ab06caa3ca5d6299925efaa752a2d2154ece929", "0x3947b992dc0147d2d89df0392213781b04b25075", "0xca2f75930912b85d8b2914ad06166483c0992945", "0x1658aed6c7dbab2ddbd8f5d898b0e9eab0305813", "0x211e763d0b9311c08ec92d72ddc20ab024b6572a", "0x9cddf33466ce007676c827c76e799f5109f1843c", "0x92e744307694ece235cd02e82680ec37c657d23e", "0xacabd3f9b8f76ffd2724604185fa5afa5df25ac6", "0x4131b87f74415190425ccd873048c708f8005823", "0xa1303e6199b319a891b79685f0537d289af1fc83", "0xd7410c38a86dcf3d5ec0f75e9763111e07d9c95b", "0x7e3656fccf19583dc432fb3af813e53ea566814b", "0xf8645e8f6d7f88bdb2ae7fabdeb315f9259be5b0", "0xbfa0841f7a90c4ce6643f651756ee340991f99d5", "0x2eb5ecc40e403b12ee4428d70fddf34e2c2c27b0", "0xb9784c1633ef3b839563b988c323798634714368", "0x8b09b6eb1d263644a267dfb2b2bc8d6b0fb72e7d", "0x1a2fb0af670d0234c2857fad35b789f8cb725584", "0xf21768ccbc73ea5b6fd3c687208a7c2def2d966e", "0xd41fdb03ba84762dd66a0af1a6c8540ff1ba5dfb", "0xb0a51d5e242b6a86420ec34660b14d8b9cd4d5fc", "0x541e619858737031a1244a5d0cd47e5ef480342c", "0x849233ff1aea15d80ef658b2871664c9ca994063", "0x37109a51e712471bd2c72d8d70718627e7ff0032", "0xe40255c5d7fa7ceec5120408c78c787cecb4cfdb", "0x4b0f1812e5df2a09796481ff14017e6005508003", "0x896ede222d3f7f3414e136a2791bdb08aaa25ce0", "0x151b1e2635a717bcdc836ecd6fbb62b674fe3e1d", "0x2ff3d0f6990a40261c66e1ff2017acbc282eb6d0", "0x4bd17003473389a42daf6a0a729f6fdb328bbbd7", "0x882c173bc7ff3b7786ca16dfed3dfffb9ee7847b", "0x95c78222b3d6e262426483d42cfa53685a67ab9d", "0xa07c5b74c9b40447a954e1466938b865b6bbea36", "0xeca88125a5adbe82614ffc12d0db554e2e2867c8", "0xf508fcd89b8bd15579dc79a6827cb4686a3592c8", "0x334b3ecb4dca3593bccc3c7ebd1a1c1d1780fbf1", "0x972207a639cc1b374b893cc33fa251b55ceb7c07", "0x1610bc33319e9398de5f57b33a5b184c806ad217", "0xf91d58b5ae142dacc749f58a49fcbac340cb0343", "0x650b940a1033b8a1b1873f78730fcfc73ec11f1f", "0xfd5840cd36d94d7229439859c0112a4185bc0255", "0x57a5297f2cb2c0aac9d554660acd6d385ab50c6b", "0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63", "0x4f0ed527e8a95ecaa132af214dfd41f30b361600", "0x3f515f0a8e93f2e2f891ceeb3db4e62e202d7110", "0x44754455564474a89358b2c2265883df993b12f0", "0x55d398326f99059ff775485246999027b3197955"]}
    ) {
      date {
        date
      }
      exchange {
        name
        address {
          address
        }
      }
      baseCurrency {
        address
        symbol
      }
      quoteCurrency {
        address
        symbol
      }
      USD: tradeAmount(in: USD, calculate: sum)
      USD_Avg: tradeAmount(in: USD, calculate: average)
      USD_Med: tradeAmount(in: USD, calculate: median)
      BTC: tradeAmount(in: BTC)
      USDT: tradeAmount(in: USDT)
      Takers: count(uniq: takers)
      Txs: count
      Txs_greater_10k: count(tradeAmountUsd: {gt: 10000})
      Txs_greater_50k: count(tradeAmountUsd: {gt: 50000})
      Txs_greater_100k: count(tradeAmountUsd: {gt: 100000})
      Txs_greater_500k: count(tradeAmountUsd: {gt: 500000})
    }
  }
}

query TotalDailyTradeVolume {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0xc13a1b47377a8382bd3f6f9105137c1e838758b9"}
      date: {since: "2021-05-08T22:49:00.538Z"}
    ) {
      count
      tradeAmount(in: USD)
    }
  }
}

query SmartcontracteventLp {
  ethereum(network: bsc) {
    smartContractEvents(
      options: {desc: "block.height", limit: 10}
      smartContractAddress: {is: "0xa527a61703d82139f8a06bc30097cc9caa2df5a6"}
      txHash: {is: "0x2f624d5a1170c2e9462edc723a73dc6d157add223ed044cfc9644e078b7d7451"}
    ) {
      block {
        height
        timestamp {
          unixtime
        }
      }
      transaction {
        hash
      }
      eventIndex
      arguments {
        value
        argument
        index
        argumentType
      }
      smartContractEvent {
        name
        signature
        signatureHash
      }
      date {
        date
      }
    }
  }
}

query TokenTransaction {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.minute"}
      date: {since: "2021-01-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {is: "0x9b93c29595dd603f75854eba3c5f4ee078ee4454"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      baseCurrency {
        symbol
        address
      }
      baseAmount
      quoteCurrency {
        symbol
        address
      }
      quoteAmount
      trades: count
      quotePrice
      maximum_price: quotePrice(calculate: maximum)
      minimum_price: quotePrice(calculate: minimum)
      open_price: minimum(of: block, get: quote_price)
      close_price: maximum(of: block, get: quote_price)
    }
  }
}

query GetPoolMultiple {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "count"}
      smartContractAddress: {in: ["0x9adc6Fb78CEFA07E13E9294F150C1E8C1Dd566c0", "0xD6F91E5ecFEF046A5400541770F1435747332d31"]}
    ) {
      count
      tradeAmount(in: USD)
    }
  }
}

query TransfersLast24Hours {
  ethereum(network: bsc) {
    transfers(
      options: {desc: "date.date"}
      currency: {is: "0x47ff6511939ab379d7756b003f61010b9eab3077"}
      date: {after: "2021-03-07"}
    ) {
      date: date {
        date(format: "%y-%m-%d %H:%M")
      }
      amount
    }
  }
}

query TokenCharting {
  ethereum(network: bsc) {
    dexTrades(
      options: {limit: 100, asc: "timeInterval.minute"}
      date: {since: "2021-01-01"}
      exchangeName: {is: "Pancake"}
      baseCurrency: {is: "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"}
      quoteCurrency: {is: "0x9b93c29595dd603f75854eba3c5f4ee078ee4454"}
    ) {
      timeInterval {
        minute(count: 5)
      }
      high: quotePrice(calculate: maximum)
      low: quotePrice(calculate: minimum)
      open: minimum(of: block, get: quote_price)
      close: maximum(of: block, get: quote_price)
      baseCurrency {
        name
      }
      quoteCurrency {
        name
      }
    }
  }
}

query SnogeTransfers {
  ethereum(network: ethereum) {
    transfers(currency: {is: "0x072c46f392e729c1f0d92a307c2c6dba06b5d078"}) {
      sender {
        address
      }
      receiver {
        address
      }
      amount
    }
  }
}

query SnogeDextrades {
  ethereum {
    dexTrades(baseCurrency: {is: "0x072c46f392e729c1f0d92a307c2c6dba06b5d078"}) {
      count
      baseCurrency {
        symbol
      }
    }
  }
}

query SnogeSmartcontractswaps {
  ethereum(network: ethereum) {
    smartContractEvents(
      smartContractAddress: {is: "0x98904add2880c06e7a9ba444dc463d034f29ecf4"}
    ) {
      count(smartContractEvent: {is: "Swap"})
    }
  }
}

query HederaMessagesByTopics($network: HederaNetwork!, $from: ISO8601DateTime, $till: ISO8601DateTime, $dateFormat: String!) {
  hedera(network: $network) {
    messages(options: {asc: "date.date"}, date: {since: $from, till: $till}) {
      date {
        date(format: $dateFormat)
      }
      entity {
        id
      }
      count
    }
  }
}

query CopyOfGetBalanceOfHoldersPublicMyQuery {
  ethereum(network: bsc) {
    address(
      address: {in: ["0x81b688a7fc4d7fa77ab1bddaacc5cb9cee8840a7", "0x81bc425a457ba4e19a112c8143c1a3788056cbf0", "0x81eec6627003150828a60f23441ca3a0d6988887", "0x820aad8ec0b3f99e53e744ea9409ceafa6db4914", "0x82253a56825a53ebfcf4b18611521e6d24c5a9ff"]}
    ) {
      address
      balances(
        currency: {is: "0x1CAA1e68802594EF24111ff0D10Eca592A2B5c58"}
        height: {between: [5873977, 5873979]}
      ) {
        value
      }
    }
  }
}

query QuotepricePalm {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x9768e5b2d8e761905bc81dfc554f9437a46cdcc6"}
      quoteCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
      options: {desc: ["block.height"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M")
          unixtime
        }
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query QueryPairOfToken {
  ethereum {
    arguments(
      smartContractAddress: {is: "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f"}
      smartContractEvent: {is: "PairCreated"}
      options: {desc: "block.height", limit: 3}
    ) {
      block {
        height
      }
      argument {
        name
      }
      reference {
        address
      }
    }
  }
}

query PriceForListOfTokensInBusd {
  ethereum(network: bsc) {
    count0: dexTrades(
      exchangeName: {in: ["Pancake", "Pancake v2"]}
      options: {limit: 9, asc: "quoteCurrency.symbol"}
      baseCurrency: {is: "0xe9e7cea3dedca5984780bafc599bd69add087d56"}
      quoteCurrency: {in: ["0x86622caaca67c99661b3c27be5e42d629eac23db", "0x9897d2577754c6a2b6c4ab71357a4369d1781758", "0xbbdfb043c69739814c18f74a6a588465d70c61d2", "0xe9e7cea3dedca5984780bafc599bd69add087d56", "0x98fc5b3a39d712fa5a826df4f9c47bb6c0f6f8a9", "0x25f6524c2bfa5eebcc50beafd08525e0786082cf", "0xfd08766fbcf21c77eda29006f83becdcf0d93d8d", "0x1d807932297bd25f71e2635a9840833ae23e61a5", "0x91ba1d7ce730a28b3b77a688225fb46fd0e7b070", "0xa3b7446d998475aa4b521243da8a139d83ef1435", "0xd4d177803495c25896e4384e1dc97700297140d7", "0x4e8a9d0bf525d78fd9e0c88710099f227f6924cf", "0x41b6e648e163d3b2f7b3a6594fa93094102e7c1e", "0x7302074b5290d4fda424f223d6a777974d3fe57b", "0xcd272bf348c3e2d50ed883c19fee73e10fdf1249", "0x3bd4fdcae62a6b3a867be5193396ffcc8aa3466d", "0xf4e91889284952d9cc9bb67f487a64d7b4bc36c5", "0x7b2124de75c7dc1ef61ee666b6b5e9d8506105e5", "0x1d6c7f4d7b83fbf6c5ed7dedca20134221c5707c", "0x4a81c37cb73bcf44fdd91c20453ecc1021795edd", "0xe5c5923843ba152758773af7ea73c21793899135", "0x878ae6ceea6466d70dbc5550f0427d096c4d9cde", "0x0b6f2e261431dac90b2883ae4190cc1526afaef4", "0xa1667e96dd0898318f8bb9bddb5a9d354f63db65", "0xcf4d3e848d872dbf5f40986713ac9e0601a02861", "0x023eac15a071d46ede0cb59ab84243eab9b6d559", "0xd6936e5ec01c4bb4dc0120235fa8bd23eace687e", "0x8357357420291d2d2e275afac69d77f98524c35e", "0x45b110fcdd1a20fceb1805ec0f7ca6ef3712befc", "0xc59824a2ab5db97b8202e283fd1b8584c69348d0", "0x55bde4c69e975c4d2c1a99d4469545e5fe316462", "0xa56d4b4736cfcac1bd8107e375a04ca8411244d7", "0x36457585c3ae609a86a97b5b077d4a656fcd61ac", "0x338196a509b4c66749c3f44c21c00501e6acf7bc", "0x8dddae156714b4031f787771da5b2a2b21d20ac5", "0x0e11829ffc774e140a6b3b7334f5446226a52996", "0x6bb7c07efe378b06dcd4df29538d8c680c407499", "0x87ffc48c9f89fc5dfa05836e083406d684fd6331", "0xaa9a06fb14c1957583a1dabb1db00ad9c1366b5c", "0x3ec90564ac30edc6113269c96f0cedbfb5f281ec", "0xb90d276032d85ce5369e8e6544acf28e64389f00", "0x20f84bdfa2e042700d03cfad3a02026e201c18fc", "0x0bf3302203af2439dfd94d212a714e5f3f49e6be", "0xd85cc913f9f4e947b87ebe29584f03181cc82c4d", "0x862827e70221c3a0ba27ab608ddfe4d5d3fe27c2", "0xe33d8729f2e63b9cfde594f572b058e542d34d34", "0x6d7d0ca264ea9ca0fed88be7e125bb8a63aa0259", "0x214831fefc6d1cbc10525ded384f5855162a2999", "0x2f801292924433f41e34669b0817f990764ecaa0", "0x380624a4a7e69db1ca07deecf764025fc224d056", "0x0d40ad2766cc51be2909c27c300fde54372afe04", "0xfcc49626a3c2bb2e61a7ee909daf8d7714318e57", "0x72eb1afddb5652e0f5c7b9a6cc1c3241348b16c6", "0xc5c8abcebd71c5a1c3d06a5f430750d981a5e904", "0x6e4c25766fd235ae623319569a5aefc4f7b233fe", "0x8631fa055884da43e920322078666a03db03e6ea", "0xed9d24caebf748a40be619d8c513042bf02dd6a5", "0xd0d81db06c7af6746302c1540eea1166bceebd61", "0xb41505c3b53208aafe0755ae35a7d344cd69a433", "0x096da101ad55c0b51a4b925afebefabdaaad1fbc", "0xce5814efff15d53efd8025b9f2006d4d7d640b9b", "0xcda92620ac41966327537f480f20f0297a341a61", "0xefd6fc7dadbac8251bb8310bb68ba015845619e4", "0xdb93dd34602e17c60e4d63af3f0955d4442d1556", "0x4e6415a5727ea08aae4580057187923aec331227", "0xf1b72b212fc8f9a61002beab0be9d4369d182a4c", "0xbcd3fca7d60e738753e09955c03f75427e42761a", "0x00db09ed9088c05dc6f05458a2e3c6254d382475", "0x13969bbeece18da1354561e9b59dc2937ef5c95c", "0xec86ab5c9052b1dae0b9749136965f573a85754f", "0xd68d55b6dcc7a0c88e287b6a632c9754e0b2504f", "0xe6d9ff7733a8563ef723df9c0ec650b2aa7594df", "0xf33f0adcc26ef9d87926797263f4a2a71aa0f153", "0x3f6e57cfe1a5c2f81be2bb7edc462e1d64acdc44", "0xdebec6efaebfcc6657305fdf6871d744ef5ebd0f", "0x1da9cea6043e868e9d3ef4cb2f3d8df06c376c9e", "0xb0b924c4a31b7d4581a7f78f57cee1e65736be1d", "0x79ba0ab945fae020424f2a0d8a0ec8520e26f5b0", "0x9fcf747efedc94bf56d883ea4ffb71a5c596609c", "-", "0x124b5ba962d5288eb0be2f6043f80eb9a925ad65", "0x22da44f5b3ae52521377a12459945f6cf50400a6", "0x8496a36ec6c6315ea27e14a35e25d26e4d2f3207", "0x06f444138dc00647bc2d23f2b8c61a53ac979d7d", "0xc7dd396326fa5e4cd0c64ff8985b3f19b82164f3", "0x533f28bef8529bdcf1270ddf794344410a45ae72", "0x221b0815b38fccd0aa212162414ab2335d7988ec", "0xe3ad11878f8b5f3a7f6e8dd5318b2f3350612bd7", "0x8f5c13668354c742ba410b221807897372369e9b", "0xb0a1978a5465b949ffef1783feb36645927111b2", "0x946d1cfd8e3b0b5aa7440979b1bb97d2aada9310", "0x6a4572533d090690e829db5236655d3d0aeae592", "0x6ed26d8a3059c2ca7ecee4f35841079187de761a", "0x958a0166ae5022a96c1d870bd158bc167cebda81", "0xdeccd579a9622965251ef5a5a8d9a8050cf517b2", "0xf333c198796ae65bee8b586dd886f7583dfbf479", "0x1991501f1398663f69dd7391c055bb0df6514f76", "0xdf6b2112c9d7ec7ea9f65a23a2e8e5bec562426f", "0xb568b7cd9664db38e2a629d78f2631bc7ec4fe3b", "0x9ac54ccd649537a5e4f9ae1dbe732c84bb617064", "0x7fce7f3ac878a3a06974f30a7069be5df70a31c4", "0x5cd2fde277c19dd1e5a75026b95125988676f6b9", "0xc64084567abbb7c19814ebc56885d6ac802ba88e", "0x849eb81c160541100f6f11e1d268567a971d9c3d", "0x43f4de561081a756d3caebbdbf6c8c30b58ef5e3", "0xba03f91b4eee43b34ee28130541c489efb7093e2", "0x3ae24ec70800c1cceb0ce7a5573cfd1f04464899", "0x6cfeb2d07623fd884f525e7c33b6fc97147c4f41", "0xfe4cbeaf7cef9066690507b40d43203be69857ac", "0x9fdcf499f1b05ccb0e89f4fc99833f42c783124a", "0x7d255e05b9cfb0f0c9849493e9dad79268b6794b", "0x70a9bb27154875fb2f6c6b924030a89ff0423f53", "0xa917079dd2d2d97734447f9c6269d949c20467e7", "0x47f1a0ee48ab1ce122a51b3b8037cc3aca6e1d63", "0x2a9718deff471f3bb91fa0eceab14154f150a385", "0x295f2122ebfcc5c38b4bd33879a37348195b61fb", "0x5e90253fbae4dab78aa351f4e6fed08a64ab5590", "0x0a4dc3ac9426e1c85db6b618de48a2bbdd596c4e", "0xad070194f0644cec996b9a8076eabf09e82921ea", "0xb27adaffb9fea1801459a1a81b17218288c097cc", "0x6e2307de122cd9465b7f47dd73a5f89bb29e4285", "0x95afdae61c17af09b5d484b63d7e421d7b743313", "0xb24cc33a63908e308c986e6fafca164e992ee490", "0xe2318e548684f77c73fa7191f5eed86d4ee3c810", "0xe95748df47e3ed06f545735bdedc63331c520c6d", "0xc015009a79ff1deac03e64a0e3a7fd044e999e03", "0x7c4fbdb8f1bdf2746f9f853c7a6949d47b84b716", "0xb2330da0d3b95e2c427f375986b394be4b11960c", "0x9056a0b53f39594abee23d73d5a99e10338f2dc0", "0xbfcb3a513d6af17ffb2451fa6c3adb2714671db6", "0x88176fc32a5951c01bad3212e1cdb16ba54320eb", "0x02f793822f18dd9f7035149a831c823e0af07f3b", "0x8076c74c5e3f5852037f31ff0093eeb8c8add8d3", "0x4d8883ee27d521ae2f7fea5104a9f85b86bccdd4", "0xe8baa62473e50703645d5f769a3052f1dc182d3f", "0x4f58fa47fa3a7aee33ceb388baac1dca7795012d", "0xc35731db276ca7b01715c40999909a178c6bbdb8", "0xd5a0dad4e6f399cdc346ff04fd90ec0b511fcef9", "0x8891de345808e77228677f0efb56125db1e93a49", "0xa2f5087756a0a49ec9ff76dc4493df4022a1a9eb", "0xfbc92a6b7a388ab9e99d7acc8ecfb3b315f481f4", "0x44c928e154d2f8bf41557ac2c93fb398263af0dd", "0x5bc94e9347f3b9be8415bdfd24af16666704e44f", "0x7aecb24d2943115b136d953aafd84e82c9c766ca", "0x869dd7a64afbe5370a8c591d9b8650be60c0b8f6"]}
    ) {
      quoteCurrency {
        symbol
        name
        address
      }
      quotePrice
      median_price: quotePrice(calculate: median)
    }
  }
}

query GetCakeBnbPriceOnSpecBlock {
  ethereum(network: bsc) {
    dexTrades(
      baseCurrency: {is: "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"}
      quoteCurrency: {is: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"}
      height: {gteq: 6481098}
      options: {asc: ["block.height", "transaction.index"], limit: 1}
    ) {
      block {
        height
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
          unixtime
        }
      }
      transaction {
        index
      }
      baseCurrency {
        symbol
      }
      quoteCurrency {
        symbol
      }
      quotePrice
    }
  }
}

query Latest24hPancakeLpPoolsTrading {
  ethereum(network: bsc) {
    dexTrades(
      options: {desc: "timeInterval.hour", limit: 24}
      smartContractAddress: {in: ["0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6", "0x86e650350c40a5178a5d014ba37fe8556232b898", "0x9d8b7e4a9d53654d82f12c83448d8f92732bc761", "0x9e642d174b14faea31d842dc83037c42b53236e6", "0x4576C456AF93a37a096235e5d83f812AC9aeD027", "0x5E3CD27F36932Bc0314aC4e2510585798C34a2fC", "0xb5ab3996808c7e489dcdc0f1af2ab212ae0059af", "0xc1800c29cf91954357cd0bf3f0accaada3d0109c", "0xcbe2cf3bd012e9c1ade2ee4d41db3dac763e78f3", "0x60bB03D1010b99CEAdD0dd209b64bC8bd83da161", "0x66b9e1eac8a81f3752f7f3a5e95de460688a17ee", "0x74690f829fec83ea424ee1f1654041b2491a7be9", "0x3ef4952c7a9afbe374ea02d1bf5ed5a0015b7716", "0xffb9e2d5ce4378f1a89b29bf53f80804cc078102", "0x36b7d2e5c7877392fb17f9219efad56f3d794700", "0x6411310c07d8c48730172146fd6f31fa84034a8b", "0x91589786D36fEe5B27A5539CfE638a5fc9834665", "0xbc765fd113c5bdb2ebc25f711191b56bb8690aec", "0x20781bc3701c5309ac75291f5d09bdc23d7b7fa8", "0x01ecc44ddd2d104f44d2aa1a2bd9dfbc91ae8275", "0xbe14f3a89a4f7f279af9d99554cf12e8c29db921", "0x64373608f2e93ea97ad4d8ca2cce6b2575db2f55", "0xd6b900d5308356317299dafe303e661271aa12f1", "0xd5b3ebf1a85d32c73a82b40f75e1cd929caf4029", "0x58B58cab6C5cF158f63A2390b817710826d116D0", "0x470bc451810b312bbb1256f96b0895d95ea659b1", "0x51a2ffa5b7de506f9a22549e48b33f6cf0d9030e", "0x9c4f6a5050cf863e67a402e8b377973b4e3372c1", "0xbEA35584b9a88107102ABEf0BDeE2c4FaE5D8c31", "0xC743Dc05F03D25E1aF8eC5F8228f4BD25513c8d0", "0x9f40e8a2fcaa267a0c374b6c661e0b372264cc3d", "0x1b96b92314c44b159149f7e0303511fb2fc4774f", "0xba51d1ab95756ca4eab8737ecd450cd8f05384cf", "0xc639187ef82271d8f517de6feae4faf5b517533c", "0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c", "0x981d2ba1b298888408d342c39c2ab92e8991691e", "0xaebe45e3a03b734c68e5557ae04bfc76917b4686", "0x610e7a287c27dfFcaC0F0a94f547Cc1B770cF483", "0x41182c32F854dd97bA0e0B1816022e0aCB2fc0bb", "0x70D8929d04b60Af4fb9B58713eBcf18765aDE422", "0x7561EEe90e24F3b348E1087A005F78B4c8453524", "0x4e0f3385d932F7179DeE045369286FFa6B03d887", "0x20bcc3b8a0091ddac2d0bc30f68e6cbb97de59cd", "0xc7b4b32a3be2cb6572a1c9959401f832ce47a6d2", "0x2333c77fc0b2875c11409cdcd3c75d42d402e834", "0x574a978c2d0d36d707a05e459466c7a1054f1210", "0x56c77d59e82f33c712f919d09fceddf49660a829", "0x5acac332f0f49c8badc7afd0134ad19d3db972e6", "0x54edd846db17f43b6e43296134ecd96284671e81", "0x68Ff2ca47D27db5Ac0b5c46587645835dD51D3C1", "0x4269e7F43A63CEA1aD7707Be565a94a9189967E9", "0x35fe9787f0ebf2a200bac413d3030cf62d312774", "0x7a34bd64d18e44CfdE3ef4B81b87BAf3EB3315B6", "0x30479874f9320a62bce3bc0e315c920e1d73e278", "0x752E713fB70E3FA1Ac08bCF34485F14A986956c4", "0x7793870484647a7278907498ec504879d6971EAb", "0xd937FB9E6e47F3805981453BFB277a49FFfE04D7", "0x3Da30727ed0626b78C212e81B37B97A8eF8A25bB", "0x4D5aA94Ce6BbB1BC4eb73207a5a5d4D052cFcD67", "0xdc6c130299e53acd2cc2d291fa10552ca2198a6b", "0xeb325a8ea1c5abf40c7ceaf645596c1f943d0948", "0xD1F12370b2ba1C79838337648F820a87eDF5e1e6", "0x680dd100e4b394bda26a59dd5c119a391e747d18", "0x3aB77e40340AB084c3e23Be8e5A6f7afed9D41DC", "0xff17ff314925dff772b71abdff2782bc913b3575", "0xc15fa3E22c912A276550F3E5FE3b0Deb87B55aCd", "0x36b8b28d37f93372188f2aa2507b68a5cd8b2664", "0x4db28767d1527ba545ca5bbda1c96a94ed6ff242", "0x292ca56ed5b3330a19037f835af4a9c0098ea6fa", "0x7cd05f8b960ba071fdf69c750c0e5a57c8366500", "0x745c4fd226e169d6da959283275a8e0ecdd7f312", "0x2730bf486d658838464a4ef077880998d944252d", "0x970858016C963b780E06f7DCfdEf8e809919BcE8", "0x17580340f3daedae871a8c21d15911742ec79e0f", "0x0392957571f28037607c14832d16f8b653edd472", "0x99d865ed50d2c32c1493896810fa386c1ce81d91", "0xc92Dc34665c8a21f98E1E38474580b61b4f3e1b9", "0x852A68181f789AE6d1Da3dF101740a59A071004f", "0xF609ade3846981825776068a8eD7746470029D1f", "0xD5664D2d15cdffD597515f1c0D945c6c1D3Bf85B", "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82"]}
    ) {
      traders: count(uniq: senders)
      trades: count
      tradeAmount(in: USD)
      timeInterval {
        hour(count: 1)
      }
    }
  }
}

query AffiliateappsTradesReceive($network: EthereumNetwork!, $limit: Int!, $offset: Int!, $sender: String!, $receiver: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transfers(
      options: {desc: "block.height", limit: $limit, offset: $offset}
      date: {since: $from, till: $till}
      amount: {gt: 0}
      sender: {is: $sender}
      receiver: {is: $receiver}
    ) {
      block {
        timestamp {
          time(format: "%Y-%m-%d %H:%M:%S")
        }
        height
      }
      amountUSD: amount(in: USD)
      amount
      transaction {
        hash
      }
      external
      currency {
        address
        name
        symbol
      }
    }
  }
}

query AffiliateappsSumTradesReceive($network: EthereumNetwork!, $sender: String!, $receiver: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  ethereum(network: $network) {
    transfers(
      date: {since: $from, till: $till}
      amount: {gt: 0}
      sender: {is: $sender}
      receiver: {is: $receiver}
    ) {
      amountUSD: amount(in: USD, calculate: sum)
      amount
      currency {
        address
        name
        symbol
        decimals
      }
      count(uniq: transfers)
    }
  }
}
